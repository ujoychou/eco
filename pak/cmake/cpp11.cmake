################################################################################
# PRJ_DIR: project directory, which include api/src/pak/utt/doc; .tmp/.bin
# SRC_DIR: dedicated the source files to build.
# VER_FILE: the output version file.
################################################################################


# option: for ccmake.
option(MSVC_PCH "msvc precompile header file in windows." OFF)
# logging ccmake options.
message("---------------------------------------------------------------------")
message("== ${PROJECT_NAME} ${PROJECT_VERSION} ${PRJ_CFG}")
message("== MSVC_PCH=${MSVC_PCH}")
message("---------------------------------------------------------------------")

# project version config name. "eco_3.2.0_debug".
set(PRJ_CFG ${PROJECT_NAME}_${CMAKE_BUILD_TYPE})
string(TOLOWER ${PRJ_CFG} PRJ_CFG)
# project directory.
set(API_DIR ${PRJ_DIR}/api)
set(TMP_DIR ${PRJ_DIR}/.tmp/${PRJ_CFG})
set(BIN_DIR ${PRJ_DIR}/.bin/${PRJ_CFG})
# project version template file.
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Version.tpl.h ${VER_FILE})
# project logging.
message("== PRJ=${PRJ_DIR}")
message("== SRC=${SRC_DIR}")
message("== CBIN=${CMAKE_CURRENT_BIN_DIR}")
message("== CMAKE=${CMAKE_CURRENT_SOURCE_DIR}")
message("---------------------------------------------------------------------")

# include directory: api/src
include_directories(${API_DIR})
include_directories(${SRC_DIR})
# include directory: conan cmake generated by "conanfile.txt".
include(${TMP_DIR}/conanbuildinfo.cmake)
include_directories(${CONAN_INCLUDE_DIRS})
# include library: conan libs directory.
link_directories(${CONAN_LIB_DIRS})
# include library: logging.
message("== INC_CONAN=${CONAN_INCLUDE_DIRS}")
message("== LIB_CONAN=${CONAN_LIB_DIRS}")
message("---------------------------------------------------------------------")

# pre compiler: protobuf
#set(GRPC_PROTOC ${CONAN_BIN_DIRS_GRPC}/protoc)
#set(GRPC_CPP_PLUGIN ${CONAN_BIN_DIRS_GRPC}/grpc_cpp_plugin)
# pre compiler: msvc pch
if(MSVC_PCH)
    set(PCH_TARGET ${PROJECT_NAME})
    set(PCH_HEADER_FILE ${SRC_DIR}/Pch.h)
    set(PCH_SOURCE_FILE ${SRC_DIR}/Pch.cpp)
    include(${CMAKE_CURRENT_SOURCE_DIR}/msvc_pch.cmake)
endif(MSVC_PCH)

# c++ compiler: c++
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
# c++ compiler: warning/error option.
# unuse -Werror for knowing who are warning. 
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wswitch")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
# c++ compiler: debug/release.
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Os")
# c++ compiler: shared dll.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
# c++ compiler: "compile_commands.json".(used in vscode c_cpp_properties.json)
set(CMAKE_EXPORT_COMPILE_COMMANDS True)
# c++ compiler: logging
message("== CXX=${CMAKE_CXX_FLAGS}")
message("== CXX_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}")
message("== CXX_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}")
message("---------------------------------------------------------------------")

# c++ target: exe/so
add_executable(${PROJECT_NAME})
# c++ target: include cpp files.
#file(GLOB_RECURSE SRC_DIR_FILES ${SRC_DIR}/*.cpp ${SRC_DIR}/*.cc ${SRC_DIR}/*.c)
set(CXX_FILES "${CXX_FILES};${SRC_DIR_FILES}")
# c++ target: exclude cpp files.
list(REMOVE_ITEM CXX_FILES ${CXX_FILES_EXCLUDE})
# c++ target: bind to project.
target_sources(${PROJECT_NAME} PRIVATE ${CXX_FILES})
target_link_libraries(${PROJECT_NAME} PRIVATE ${CXX_LIBS})
message("== CPP=${CXX_FILES}")
message("== LIB=${CXX_LIBS}")
message("---------------------------------------------------------------------")
