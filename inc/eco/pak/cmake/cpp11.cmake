################################################################################
# PRJ_DIR: project directory, which include api/src/pak/utt/doc; .tmp/.bin
# SRC_DIRS: dedicated the source files to build.
# PRJ_VER_FILE: the output version file.
################################################################################
# project version config name. "eco-3.2.0-debug".
set(PRJ_CFG ${PROJECT_NAME}_${CMAKE_BUILD_TYPE})
string(TOLOWER ${PRJ_CFG} PRJ_CFG)
# project version template file.
if(PRJ_VER_FILE)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Version.tpl.h ${PRJ_VER_FILE})
endif()

# option: for ccmake.
option(MSVC_PCH "msvc precompile header file in windows." OFF)
# logging ccmake options.
message("---------------------------------------------------------------------")
message("== ${PROJECT_NAME}-${PROJECT_VERSION}-${PRJ_CFG}")
message("== MSVC_PCH=${MSVC_PCH}")
message("---------------------------------------------------------------------")

# project directory
set(TMP_DIR ${PRJ_DIR}/.tmp/${PRJ_CFG})
set(BIN_DIR ${PRJ_DIR}/.bin/${PRJ_CFG})
if (NOT INS_DIR)
    set(INS_DIR ${BIN_DIR})
endif()
# project directory logging.
message("== PRJ=${PRJ_DIR}")
message("== SRC=${SRC_DIRS}")
message("== MAK=${CMAKE_CURRENT_SOURCE_DIR}")
message("== BIN=${CMAKE_CURRENT_BINARY_DIR}")
message("== BIN=${BIN_DIR}")
message("== TMP=${TMP_DIR}")
message("---------------------------------------------------------------------")

# c++ target: project name. (exe/so/a)
# c++ target: output name.
if(${PRJ_FMT} STREQUAL "exe")
    add_executable(${PROJECT_NAME})
    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${INS_DIR})
elseif(${PRJ_FMT} STREQUAL "lib")
    add_library(${PROJECT_NAME} SHARED)
    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${INS_DIR})
    set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "lib")
    set_target_properties(${PROJECT_NAME} PROPERTIES SUFFIX ".so.${PROJECT_VERSION}")
elseif(${PRJ_FMT} STREQUAL "static")
    add_library(${PROJECT_NAME} STATIC)
    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${INS_DIR})
endif()

# include libs directory: api/src
target_include_directories(${PROJECT_NAME} PRIVATE ${INC_DIRS})
target_include_directories(${PROJECT_NAME} PRIVATE ${PRJ_DIR}/inc)
target_include_directories(${PROJECT_NAME} PRIVATE ${SRC_DIRS})
target_link_libraries(${PROJECT_NAME} PRIVATE ${LINK_LIBS})
target_link_directories(${PROJECT_NAME} PRIVATE ${LINK_LIB_DIRS})
# include libs directory: conan cmake generated by "conanfile.txt".
include(${TMP_DIR}/conanbuildinfo.cmake)
target_include_directories(${PROJECT_NAME} PRIVATE ${CONAN_INCLUDE_DIRS})
target_link_directories(${PROJECT_NAME} PRIVATE ${CONAN_LIB_DIRS})
# include library: logging.
message("== INC_CONAN=${CONAN_INCLUDE_DIRS}")
message("== LIB_CONAN=${CONAN_LIB_DIRS}")
message("---------------------------------------------------------------------")

# pre compiler: protobuf
#set(GRPC_PROTOC ${CONAN_BIN_DIRS_GRPC}/protoc)
#set(GRPC_CPP_PLUGIN ${CONAN_BIN_DIRS_GRPC}/grpc_cpp_plugin)
# pre compiler: msvc pch
if(MSVC_PCH)
    set(PCH_TARGET ${PROJECT_NAME})
    set(PCH_HEADER_FILE ${SRC_DIRS}/Pch.h)
    set(PCH_SOURCE_FILE ${SRC_DIRS}/Pch.cpp)
    include(${CMAKE_CURRENT_SOURCE_DIR}/msvc_pch.cmake)
endif(MSVC_PCH)

# c++ compiler: c++
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
# c++ compiler: warning/error option.
# unuse -Werror for knowing who are warning. 
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter -Wno-switch")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
# c++ compiler: shared dll.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
# c++ compiler: debug/release.
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -ggdb -O0")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Os")
# c++ compiler: "compile_commands.json".(used in vscode c_cpp_properties.json)
set(CMAKE_EXPORT_COMPILE_COMMANDS True)
# c++ compiler: logging
message("== CXX=${CMAKE_CXX_FLAGS}")
message("== CXX_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}")
message("== CXX_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}")
message("== CXX_COMPILE_COMMANDS=${CMAKE_EXPORT_COMPILE_COMMANDS}")
message("---------------------------------------------------------------------")

# c++ target: include cpp files.
if(SRC_DIRS)
    set(CXX_TEMP )
    file(GLOB_RECURSE CXX_TEMP ${SRC_DIRS}/*.cpp)
    list(APPEND SRC_FILES ${CXX_TEMP})
    file(GLOB_RECURSE CXX_TEMP ${SRC_DIRS}/*.cc)
    list(APPEND SRC_FILES ${CXX_TEMP})
    file(GLOB_RECURSE CXX_TEMP ${SRC_DIRS}/*.c)
    list(APPEND SRC_FILES ${CXX_TEMP})
endif()
# c++ target: exclude cpp files.
list(REMOVE_ITEM SRC_FILES ${SRC_FILES_EXCLUDE})
# c++ target: exclude cpp dirs.
if(SRC_DIRS_EXCLUDE)
    set(CXX_TEMP )
    file(GLOB_RECURSE CXX_TEMP ${SRC_DIRS_EXCLUDE}/*.cpp)
    list(REMOVE_ITEM SRC_FILES ${CXX_TEMP})
    file(GLOB_RECURSE CXX_TEMP ${SRC_DIRS_EXCLUDE}/*.cc)
    list(REMOVE_ITEM SRC_FILES ${CXX_TEMP})
    file(GLOB_RECURSE CXX_TEMP ${SRC_DIRS_EXCLUDE}/*.c)
    list(REMOVE_ITEM SRC_FILES ${CXX_TEMP})
endif()
# c++ target: bind to project.
target_sources(${PROJECT_NAME} PRIVATE ${SRC_FILES})

# c++ target: inc & lib & install.
message("== CPP=${SRC_FILES}")
message("== INC_DIR=${INC_DIRS}")
message("== LIB_DIR=${LINK_LIB_DIRS}")
message("== LIB=${LINK_LIBS}")
message("== INS_DIR=${INS_DIR}")
message("---------------------------------------------------------------------")
