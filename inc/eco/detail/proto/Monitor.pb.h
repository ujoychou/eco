// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Monitor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Monitor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Monitor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Monitor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Monitor_2eproto;
namespace eco {
namespace net {
namespace proto {
class Logging;
struct LoggingDefaultTypeInternal;
extern LoggingDefaultTypeInternal _Logging_default_instance_;
class NetworkCount;
struct NetworkCountDefaultTypeInternal;
extern NetworkCountDefaultTypeInternal _NetworkCount_default_instance_;
class Service;
struct ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionCount;
struct SessionCountDefaultTypeInternal;
extern SessionCountDefaultTypeInternal _SessionCount_default_instance_;
class SessionExcept;
struct SessionExceptDefaultTypeInternal;
extern SessionExceptDefaultTypeInternal _SessionExcept_default_instance_;
}  // namespace proto
}  // namespace net
}  // namespace eco
PROTOBUF_NAMESPACE_OPEN
template<> ::eco::net::proto::Logging* Arena::CreateMaybeMessage<::eco::net::proto::Logging>(Arena*);
template<> ::eco::net::proto::NetworkCount* Arena::CreateMaybeMessage<::eco::net::proto::NetworkCount>(Arena*);
template<> ::eco::net::proto::Service* Arena::CreateMaybeMessage<::eco::net::proto::Service>(Arena*);
template<> ::eco::net::proto::Session* Arena::CreateMaybeMessage<::eco::net::proto::Session>(Arena*);
template<> ::eco::net::proto::SessionCount* Arena::CreateMaybeMessage<::eco::net::proto::SessionCount>(Arena*);
template<> ::eco::net::proto::SessionExcept* Arena::CreateMaybeMessage<::eco::net::proto::SessionExcept>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eco {
namespace net {
namespace proto {

// ===================================================================

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit constexpr Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return new Session();
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eco.net.proto.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 5,
    kLangFieldNumber = 6,
    kIpFieldNumber = 10,
    kIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kPortFieldNumber = 11,
    kStateFieldNumber = 15,
    kStampOpenFieldNumber = 16,
    kStampCloseFieldNumber = 17,
  };
  // string user = 5;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string lang = 6;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string ip = 10;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 owner = 2;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 11;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 state = 15;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 stamp_open = 16;
  void clear_stamp_open();
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_open() const;
  void set_stamp_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stamp_open() const;
  void _internal_set_stamp_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 stamp_close = 17;
  void clear_stamp_close();
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_close() const;
  void set_stamp_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stamp_close() const;
  void _internal_set_stamp_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:eco.net.proto.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_open_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_close_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Monitor_2eproto;
};
// -------------------------------------------------------------------

class SessionCount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.SessionCount) */ {
 public:
  inline SessionCount() : SessionCount(nullptr) {}
  ~SessionCount() override;
  explicit constexpr SessionCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionCount(const SessionCount& from);
  SessionCount(SessionCount&& from) noexcept
    : SessionCount() {
    *this = ::std::move(from);
  }

  inline SessionCount& operator=(const SessionCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionCount& operator=(SessionCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionCount* internal_default_instance() {
    return reinterpret_cast<const SessionCount*>(
               &_SessionCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SessionCount& a, SessionCount& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionCount* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionCount* New() const final {
    return new SessionCount();
  }

  SessionCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionCount& from);
  void MergeFrom(const SessionCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eco.net.proto.SessionCount";
  }
  protected:
  explicit SessionCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStampFieldNumber = 1,
    kSessSizeFieldNumber = 2,
    kConnSizeFieldNumber = 3,
    kDdosSizeFieldNumber = 4,
  };
  // uint64 stamp = 1;
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sess_size = 2;
  void clear_sess_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 sess_size() const;
  void set_sess_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sess_size() const;
  void _internal_set_sess_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 conn_size = 3;
  void clear_conn_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 conn_size() const;
  void set_conn_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conn_size() const;
  void _internal_set_conn_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ddos_size = 4;
  void clear_ddos_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 ddos_size() const;
  void set_ddos_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ddos_size() const;
  void _internal_set_ddos_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:eco.net.proto.SessionCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sess_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conn_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ddos_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Monitor_2eproto;
};
// -------------------------------------------------------------------

class SessionExcept final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.SessionExcept) */ {
 public:
  inline SessionExcept() : SessionExcept(nullptr) {}
  ~SessionExcept() override;
  explicit constexpr SessionExcept(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionExcept(const SessionExcept& from);
  SessionExcept(SessionExcept&& from) noexcept
    : SessionExcept() {
    *this = ::std::move(from);
  }

  inline SessionExcept& operator=(const SessionExcept& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionExcept& operator=(SessionExcept&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionExcept& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionExcept* internal_default_instance() {
    return reinterpret_cast<const SessionExcept*>(
               &_SessionExcept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SessionExcept& a, SessionExcept& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionExcept* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionExcept* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionExcept* New() const final {
    return new SessionExcept();
  }

  SessionExcept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionExcept>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionExcept& from);
  void MergeFrom(const SessionExcept& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionExcept* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eco.net.proto.SessionExcept";
  }
  protected:
  explicit SessionExcept(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kStampFieldNumber = 2,
    kExceptModeFieldNumber = 5,
    kExceptTotalFieldNumber = 6,
    kExceptSizeFieldNumber = 7,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint64 stamp = 2;
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 except_mode = 5;
  void clear_except_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 except_mode() const;
  void set_except_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_except_mode() const;
  void _internal_set_except_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 except_total = 6;
  void clear_except_total();
  ::PROTOBUF_NAMESPACE_ID::uint32 except_total() const;
  void set_except_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_except_total() const;
  void _internal_set_except_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 except_size = 7;
  void clear_except_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 except_size() const;
  void set_except_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_except_size() const;
  void _internal_set_except_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:eco.net.proto.SessionExcept)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 except_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 except_total_;
  ::PROTOBUF_NAMESPACE_ID::uint32 except_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Monitor_2eproto;
};
// -------------------------------------------------------------------

class NetworkCount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.NetworkCount) */ {
 public:
  inline NetworkCount() : NetworkCount(nullptr) {}
  ~NetworkCount() override;
  explicit constexpr NetworkCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkCount(const NetworkCount& from);
  NetworkCount(NetworkCount&& from) noexcept
    : NetworkCount() {
    *this = ::std::move(from);
  }

  inline NetworkCount& operator=(const NetworkCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkCount& operator=(NetworkCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkCount* internal_default_instance() {
    return reinterpret_cast<const NetworkCount*>(
               &_NetworkCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NetworkCount& a, NetworkCount& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkCount* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkCount* New() const final {
    return new NetworkCount();
  }

  NetworkCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkCount& from);
  void MergeFrom(const NetworkCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eco.net.proto.NetworkCount";
  }
  protected:
  explicit NetworkCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kStampFieldNumber = 2,
    kReqSizeFieldNumber = 10,
    kRspSizeFieldNumber = 11,
    kReqKbyteFieldNumber = 20,
    kRspKbyteFieldNumber = 21,
  };
  // uint64 session = 1;
  void clear_session();
  ::PROTOBUF_NAMESPACE_ID::uint64 session() const;
  void set_session(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session() const;
  void _internal_set_session(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 stamp = 2;
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 req_size = 10;
  void clear_req_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 req_size() const;
  void set_req_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_req_size() const;
  void _internal_set_req_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rsp_size = 11;
  void clear_rsp_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 rsp_size() const;
  void set_rsp_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rsp_size() const;
  void _internal_set_rsp_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 req_kbyte = 20;
  void clear_req_kbyte();
  ::PROTOBUF_NAMESPACE_ID::uint64 req_kbyte() const;
  void set_req_kbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_req_kbyte() const;
  void _internal_set_req_kbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rsp_kbyte = 21;
  void clear_rsp_kbyte();
  ::PROTOBUF_NAMESPACE_ID::uint64 rsp_kbyte() const;
  void set_rsp_kbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rsp_kbyte() const;
  void _internal_set_rsp_kbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:eco.net.proto.NetworkCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 req_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rsp_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 req_kbyte_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rsp_kbyte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Monitor_2eproto;
};
// -------------------------------------------------------------------

class Service final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.Service) */ {
 public:
  inline Service() : Service(nullptr) {}
  ~Service() override;
  explicit constexpr Service(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Service(const Service& from);
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline Service& operator=(Service&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Service& default_instance() {
    return *internal_default_instance();
  }
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }
  inline void Swap(Service* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Service* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const final {
    return new Service();
  }

  Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Service>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eco.net.proto.Service";
  }
  protected:
  explicit Service(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStampFieldNumber = 1,
  };
  // uint64 stamp = 1;
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:eco.net.proto.Service)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Monitor_2eproto;
};
// -------------------------------------------------------------------

class Logging final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.Logging) */ {
 public:
  inline Logging() : Logging(nullptr) {}
  ~Logging() override;
  explicit constexpr Logging(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Logging(const Logging& from);
  Logging(Logging&& from) noexcept
    : Logging() {
    *this = ::std::move(from);
  }

  inline Logging& operator=(const Logging& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logging& operator=(Logging&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Logging& default_instance() {
    return *internal_default_instance();
  }
  static inline const Logging* internal_default_instance() {
    return reinterpret_cast<const Logging*>(
               &_Logging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Logging& a, Logging& b) {
    a.Swap(&b);
  }
  inline void Swap(Logging* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logging* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logging* New() const final {
    return new Logging();
  }

  Logging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logging>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logging& from);
  void MergeFrom(const Logging& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logging* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eco.net.proto.Logging";
  }
  protected:
  explicit Logging(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:eco.net.proto.Logging)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Monitor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// uint64 id = 1;
inline void Session::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::id() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.id)
  return _internal_id();
}
inline void Session::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Session::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.id)
}

// uint32 owner = 2;
inline void Session::clear_owner() {
  owner_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Session::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Session::owner() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.owner)
  return _internal_owner();
}
inline void Session::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_ = value;
}
inline void Session::set_owner(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.owner)
}

// string user = 5;
inline void Session::clear_user() {
  user_.ClearToEmpty();
}
inline const std::string& Session::user() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_user(ArgT0&& arg0, ArgT... args) {
 
 user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.user)
}
inline std::string* Session::mutable_user() {
  // @@protoc_insertion_point(field_mutable:eco.net.proto.Session.user)
  return _internal_mutable_user();
}
inline const std::string& Session::_internal_user() const {
  return user_.Get();
}
inline void Session::_internal_set_user(const std::string& value) {
  
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_user() {
  
  return user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_user() {
  // @@protoc_insertion_point(field_release:eco.net.proto.Session.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:eco.net.proto.Session.user)
}

// string lang = 6;
inline void Session::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& Session::lang() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.lang)
}
inline std::string* Session::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:eco.net.proto.Session.lang)
  return _internal_mutable_lang();
}
inline const std::string& Session::_internal_lang() const {
  return lang_.Get();
}
inline void Session::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_lang() {
  // @@protoc_insertion_point(field_release:eco.net.proto.Session.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:eco.net.proto.Session.lang)
}

// string ip = 10;
inline void Session::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Session::ip() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.ip)
}
inline std::string* Session::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:eco.net.proto.Session.ip)
  return _internal_mutable_ip();
}
inline const std::string& Session::_internal_ip() const {
  return ip_.Get();
}
inline void Session::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_ip() {
  // @@protoc_insertion_point(field_release:eco.net.proto.Session.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:eco.net.proto.Session.ip)
}

// uint32 port = 11;
inline void Session::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Session::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Session::port() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.port)
  return _internal_port();
}
inline void Session::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void Session::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.port)
}

// uint32 state = 15;
inline void Session::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Session::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Session::state() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.state)
  return _internal_state();
}
inline void Session::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void Session::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.state)
}

// uint64 stamp_open = 16;
inline void Session::clear_stamp_open() {
  stamp_open_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::_internal_stamp_open() const {
  return stamp_open_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::stamp_open() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.stamp_open)
  return _internal_stamp_open();
}
inline void Session::_internal_set_stamp_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stamp_open_ = value;
}
inline void Session::set_stamp_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stamp_open(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.stamp_open)
}

// uint64 stamp_close = 17;
inline void Session::clear_stamp_close() {
  stamp_close_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::_internal_stamp_close() const {
  return stamp_close_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::stamp_close() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.stamp_close)
  return _internal_stamp_close();
}
inline void Session::_internal_set_stamp_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stamp_close_ = value;
}
inline void Session::set_stamp_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stamp_close(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.stamp_close)
}

// -------------------------------------------------------------------

// SessionCount

// uint64 stamp = 1;
inline void SessionCount::clear_stamp() {
  stamp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionCount::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionCount::stamp() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionCount.stamp)
  return _internal_stamp();
}
inline void SessionCount::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stamp_ = value;
}
inline void SessionCount::set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionCount.stamp)
}

// uint32 sess_size = 2;
inline void SessionCount::clear_sess_size() {
  sess_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionCount::_internal_sess_size() const {
  return sess_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionCount::sess_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionCount.sess_size)
  return _internal_sess_size();
}
inline void SessionCount::_internal_set_sess_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sess_size_ = value;
}
inline void SessionCount::set_sess_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sess_size(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionCount.sess_size)
}

// uint32 conn_size = 3;
inline void SessionCount::clear_conn_size() {
  conn_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionCount::_internal_conn_size() const {
  return conn_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionCount::conn_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionCount.conn_size)
  return _internal_conn_size();
}
inline void SessionCount::_internal_set_conn_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  conn_size_ = value;
}
inline void SessionCount::set_conn_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conn_size(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionCount.conn_size)
}

// uint32 ddos_size = 4;
inline void SessionCount::clear_ddos_size() {
  ddos_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionCount::_internal_ddos_size() const {
  return ddos_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionCount::ddos_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionCount.ddos_size)
  return _internal_ddos_size();
}
inline void SessionCount::_internal_set_ddos_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ddos_size_ = value;
}
inline void SessionCount::set_ddos_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ddos_size(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionCount.ddos_size)
}

// -------------------------------------------------------------------

// SessionExcept

// string ip = 1;
inline void SessionExcept::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& SessionExcept::ip() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionExcept.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionExcept::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionExcept.ip)
}
inline std::string* SessionExcept::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:eco.net.proto.SessionExcept.ip)
  return _internal_mutable_ip();
}
inline const std::string& SessionExcept::_internal_ip() const {
  return ip_.Get();
}
inline void SessionExcept::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionExcept::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionExcept::release_ip() {
  // @@protoc_insertion_point(field_release:eco.net.proto.SessionExcept.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionExcept::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:eco.net.proto.SessionExcept.ip)
}

// uint64 stamp = 2;
inline void SessionExcept::clear_stamp() {
  stamp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionExcept::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionExcept::stamp() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionExcept.stamp)
  return _internal_stamp();
}
inline void SessionExcept::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stamp_ = value;
}
inline void SessionExcept::set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionExcept.stamp)
}

// uint32 except_mode = 5;
inline void SessionExcept::clear_except_mode() {
  except_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionExcept::_internal_except_mode() const {
  return except_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionExcept::except_mode() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionExcept.except_mode)
  return _internal_except_mode();
}
inline void SessionExcept::_internal_set_except_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  except_mode_ = value;
}
inline void SessionExcept::set_except_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_except_mode(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionExcept.except_mode)
}

// uint32 except_total = 6;
inline void SessionExcept::clear_except_total() {
  except_total_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionExcept::_internal_except_total() const {
  return except_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionExcept::except_total() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionExcept.except_total)
  return _internal_except_total();
}
inline void SessionExcept::_internal_set_except_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  except_total_ = value;
}
inline void SessionExcept::set_except_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_except_total(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionExcept.except_total)
}

// uint32 except_size = 7;
inline void SessionExcept::clear_except_size() {
  except_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionExcept::_internal_except_size() const {
  return except_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionExcept::except_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionExcept.except_size)
  return _internal_except_size();
}
inline void SessionExcept::_internal_set_except_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  except_size_ = value;
}
inline void SessionExcept::set_except_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_except_size(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionExcept.except_size)
}

// -------------------------------------------------------------------

// NetworkCount

// uint64 session = 1;
inline void NetworkCount::clear_session() {
  session_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkCount::_internal_session() const {
  return session_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkCount::session() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.session)
  return _internal_session();
}
inline void NetworkCount::_internal_set_session(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_ = value;
}
inline void NetworkCount::set_session(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.session)
}

// uint64 stamp = 2;
inline void NetworkCount::clear_stamp() {
  stamp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkCount::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkCount::stamp() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.stamp)
  return _internal_stamp();
}
inline void NetworkCount::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stamp_ = value;
}
inline void NetworkCount::set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.stamp)
}

// uint32 req_size = 10;
inline void NetworkCount::clear_req_size() {
  req_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkCount::_internal_req_size() const {
  return req_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkCount::req_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.req_size)
  return _internal_req_size();
}
inline void NetworkCount::_internal_set_req_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  req_size_ = value;
}
inline void NetworkCount::set_req_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_req_size(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.req_size)
}

// uint32 rsp_size = 11;
inline void NetworkCount::clear_rsp_size() {
  rsp_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkCount::_internal_rsp_size() const {
  return rsp_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkCount::rsp_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.rsp_size)
  return _internal_rsp_size();
}
inline void NetworkCount::_internal_set_rsp_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rsp_size_ = value;
}
inline void NetworkCount::set_rsp_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rsp_size(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.rsp_size)
}

// uint64 req_kbyte = 20;
inline void NetworkCount::clear_req_kbyte() {
  req_kbyte_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkCount::_internal_req_kbyte() const {
  return req_kbyte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkCount::req_kbyte() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.req_kbyte)
  return _internal_req_kbyte();
}
inline void NetworkCount::_internal_set_req_kbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  req_kbyte_ = value;
}
inline void NetworkCount::set_req_kbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_req_kbyte(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.req_kbyte)
}

// uint64 rsp_kbyte = 21;
inline void NetworkCount::clear_rsp_kbyte() {
  rsp_kbyte_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkCount::_internal_rsp_kbyte() const {
  return rsp_kbyte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkCount::rsp_kbyte() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.rsp_kbyte)
  return _internal_rsp_kbyte();
}
inline void NetworkCount::_internal_set_rsp_kbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rsp_kbyte_ = value;
}
inline void NetworkCount::set_rsp_kbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rsp_kbyte(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.rsp_kbyte)
}

// -------------------------------------------------------------------

// Service

// uint64 stamp = 1;
inline void Service::clear_stamp() {
  stamp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Service::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Service::stamp() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Service.stamp)
  return _internal_stamp();
}
inline void Service::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stamp_ = value;
}
inline void Service::set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:eco.net.proto.Service.stamp)
}

// -------------------------------------------------------------------

// Logging

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace net
}  // namespace eco

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Monitor_2eproto
