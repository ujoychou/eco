// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#ifndef PROTOBUF_Monitor_2eproto__INCLUDED
#define PROTOBUF_Monitor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace eco {
namespace net {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Monitor_2eproto();
void protobuf_AssignDesc_Monitor_2eproto();
void protobuf_ShutdownFile_Monitor_2eproto();

class Session;
class SessionCount;
class SessionExcept;
class NetworkCount;
class Service;
class Logging;

// ===================================================================

class Session : public ::google::protobuf::Message {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  void Swap(Session* other);

  // implements Message ----------------------------------------------

  Session* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 owner = 2;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 2;
  inline ::google::protobuf::uint32 owner() const;
  inline void set_owner(::google::protobuf::uint32 value);

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string lang = 6;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 6;
  inline const ::std::string& lang() const;
  inline void set_lang(const ::std::string& value);
  inline void set_lang(const char* value);
  inline void set_lang(const char* value, size_t size);
  inline ::std::string* mutable_lang();
  inline ::std::string* release_lang();
  inline void set_allocated_lang(::std::string* lang);

  // optional string ip = 10;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 10;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 11;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 11;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint32 state = 15;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 15;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint64 stamp_open = 16;
  inline bool has_stamp_open() const;
  inline void clear_stamp_open();
  static const int kStampOpenFieldNumber = 16;
  inline ::google::protobuf::uint64 stamp_open() const;
  inline void set_stamp_open(::google::protobuf::uint64 value);

  // optional uint64 stamp_close = 17;
  inline bool has_stamp_close() const;
  inline void clear_stamp_close();
  static const int kStampCloseFieldNumber = 17;
  inline ::google::protobuf::uint64 stamp_close() const;
  inline void set_stamp_close(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eco.net.proto.Session)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_stamp_open();
  inline void clear_has_stamp_open();
  inline void set_has_stamp_close();
  inline void clear_has_stamp_close();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* user_;
  ::std::string* lang_;
  ::google::protobuf::uint32 owner_;
  ::google::protobuf::uint32 port_;
  ::std::string* ip_;
  ::google::protobuf::uint64 stamp_open_;
  ::google::protobuf::uint64 stamp_close_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Monitor_2eproto();
  friend void protobuf_AssignDesc_Monitor_2eproto();
  friend void protobuf_ShutdownFile_Monitor_2eproto();

  void InitAsDefaultInstance();
  static Session* default_instance_;
};
// -------------------------------------------------------------------

class SessionCount : public ::google::protobuf::Message {
 public:
  SessionCount();
  virtual ~SessionCount();

  SessionCount(const SessionCount& from);

  inline SessionCount& operator=(const SessionCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionCount& default_instance();

  void Swap(SessionCount* other);

  // implements Message ----------------------------------------------

  SessionCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionCount& from);
  void MergeFrom(const SessionCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 stamp = 1;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 1;
  inline ::google::protobuf::uint64 stamp() const;
  inline void set_stamp(::google::protobuf::uint64 value);

  // optional uint32 sess_size = 2;
  inline bool has_sess_size() const;
  inline void clear_sess_size();
  static const int kSessSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 sess_size() const;
  inline void set_sess_size(::google::protobuf::uint32 value);

  // optional uint32 conn_size = 3;
  inline bool has_conn_size() const;
  inline void clear_conn_size();
  static const int kConnSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 conn_size() const;
  inline void set_conn_size(::google::protobuf::uint32 value);

  // optional uint32 ddos_size = 4;
  inline bool has_ddos_size() const;
  inline void clear_ddos_size();
  static const int kDdosSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 ddos_size() const;
  inline void set_ddos_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eco.net.proto.SessionCount)
 private:
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_sess_size();
  inline void clear_has_sess_size();
  inline void set_has_conn_size();
  inline void clear_has_conn_size();
  inline void set_has_ddos_size();
  inline void clear_has_ddos_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::uint32 sess_size_;
  ::google::protobuf::uint32 conn_size_;
  ::google::protobuf::uint32 ddos_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Monitor_2eproto();
  friend void protobuf_AssignDesc_Monitor_2eproto();
  friend void protobuf_ShutdownFile_Monitor_2eproto();

  void InitAsDefaultInstance();
  static SessionCount* default_instance_;
};
// -------------------------------------------------------------------

class SessionExcept : public ::google::protobuf::Message {
 public:
  SessionExcept();
  virtual ~SessionExcept();

  SessionExcept(const SessionExcept& from);

  inline SessionExcept& operator=(const SessionExcept& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionExcept& default_instance();

  void Swap(SessionExcept* other);

  // implements Message ----------------------------------------------

  SessionExcept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionExcept& from);
  void MergeFrom(const SessionExcept& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint64 stamp = 2;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 2;
  inline ::google::protobuf::uint64 stamp() const;
  inline void set_stamp(::google::protobuf::uint64 value);

  // optional uint32 except_mode = 5;
  inline bool has_except_mode() const;
  inline void clear_except_mode();
  static const int kExceptModeFieldNumber = 5;
  inline ::google::protobuf::uint32 except_mode() const;
  inline void set_except_mode(::google::protobuf::uint32 value);

  // optional uint32 except_total = 6;
  inline bool has_except_total() const;
  inline void clear_except_total();
  static const int kExceptTotalFieldNumber = 6;
  inline ::google::protobuf::uint32 except_total() const;
  inline void set_except_total(::google::protobuf::uint32 value);

  // optional uint32 except_size = 7;
  inline bool has_except_size() const;
  inline void clear_except_size();
  static const int kExceptSizeFieldNumber = 7;
  inline ::google::protobuf::uint32 except_size() const;
  inline void set_except_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eco.net.proto.SessionExcept)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_except_mode();
  inline void clear_has_except_mode();
  inline void set_has_except_total();
  inline void clear_has_except_total();
  inline void set_has_except_size();
  inline void clear_has_except_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::uint32 except_mode_;
  ::google::protobuf::uint32 except_total_;
  ::google::protobuf::uint32 except_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Monitor_2eproto();
  friend void protobuf_AssignDesc_Monitor_2eproto();
  friend void protobuf_ShutdownFile_Monitor_2eproto();

  void InitAsDefaultInstance();
  static SessionExcept* default_instance_;
};
// -------------------------------------------------------------------

class NetworkCount : public ::google::protobuf::Message {
 public:
  NetworkCount();
  virtual ~NetworkCount();

  NetworkCount(const NetworkCount& from);

  inline NetworkCount& operator=(const NetworkCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkCount& default_instance();

  void Swap(NetworkCount* other);

  // implements Message ----------------------------------------------

  NetworkCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkCount& from);
  void MergeFrom(const NetworkCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 session = 1;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 1;
  inline ::google::protobuf::uint64 session() const;
  inline void set_session(::google::protobuf::uint64 value);

  // optional uint64 stamp = 2;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 2;
  inline ::google::protobuf::uint64 stamp() const;
  inline void set_stamp(::google::protobuf::uint64 value);

  // optional uint32 req_size = 10;
  inline bool has_req_size() const;
  inline void clear_req_size();
  static const int kReqSizeFieldNumber = 10;
  inline ::google::protobuf::uint32 req_size() const;
  inline void set_req_size(::google::protobuf::uint32 value);

  // optional uint32 rsp_size = 11;
  inline bool has_rsp_size() const;
  inline void clear_rsp_size();
  static const int kRspSizeFieldNumber = 11;
  inline ::google::protobuf::uint32 rsp_size() const;
  inline void set_rsp_size(::google::protobuf::uint32 value);

  // optional uint64 req_kbyte = 20;
  inline bool has_req_kbyte() const;
  inline void clear_req_kbyte();
  static const int kReqKbyteFieldNumber = 20;
  inline ::google::protobuf::uint64 req_kbyte() const;
  inline void set_req_kbyte(::google::protobuf::uint64 value);

  // optional uint64 rsp_kbyte = 21;
  inline bool has_rsp_kbyte() const;
  inline void clear_rsp_kbyte();
  static const int kRspKbyteFieldNumber = 21;
  inline ::google::protobuf::uint64 rsp_kbyte() const;
  inline void set_rsp_kbyte(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eco.net.proto.NetworkCount)
 private:
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_req_size();
  inline void clear_has_req_size();
  inline void set_has_rsp_size();
  inline void clear_has_rsp_size();
  inline void set_has_req_kbyte();
  inline void clear_has_req_kbyte();
  inline void set_has_rsp_kbyte();
  inline void clear_has_rsp_kbyte();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 session_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::uint32 req_size_;
  ::google::protobuf::uint32 rsp_size_;
  ::google::protobuf::uint64 req_kbyte_;
  ::google::protobuf::uint64 rsp_kbyte_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Monitor_2eproto();
  friend void protobuf_AssignDesc_Monitor_2eproto();
  friend void protobuf_ShutdownFile_Monitor_2eproto();

  void InitAsDefaultInstance();
  static NetworkCount* default_instance_;
};
// -------------------------------------------------------------------

class Service : public ::google::protobuf::Message {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Service& default_instance();

  void Swap(Service* other);

  // implements Message ----------------------------------------------

  Service* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 stamp = 1;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 1;
  inline ::google::protobuf::uint64 stamp() const;
  inline void set_stamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eco.net.proto.Service)
 private:
  inline void set_has_stamp();
  inline void clear_has_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 stamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Monitor_2eproto();
  friend void protobuf_AssignDesc_Monitor_2eproto();
  friend void protobuf_ShutdownFile_Monitor_2eproto();

  void InitAsDefaultInstance();
  static Service* default_instance_;
};
// -------------------------------------------------------------------

class Logging : public ::google::protobuf::Message {
 public:
  Logging();
  virtual ~Logging();

  Logging(const Logging& from);

  inline Logging& operator=(const Logging& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Logging& default_instance();

  void Swap(Logging* other);

  // implements Message ----------------------------------------------

  Logging* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logging& from);
  void MergeFrom(const Logging& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:eco.net.proto.Logging)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Monitor_2eproto();
  friend void protobuf_AssignDesc_Monitor_2eproto();
  friend void protobuf_ShutdownFile_Monitor_2eproto();

  void InitAsDefaultInstance();
  static Logging* default_instance_;
};
// ===================================================================


// ===================================================================

// Session

// optional uint64 id = 1;
inline bool Session::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Session::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Session::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Session::id() const {
  return id_;
}
inline void Session::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 owner = 2;
inline bool Session::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Session::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Session::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Session::clear_owner() {
  owner_ = 0u;
  clear_has_owner();
}
inline ::google::protobuf::uint32 Session::owner() const {
  return owner_;
}
inline void Session::set_owner(::google::protobuf::uint32 value) {
  set_has_owner();
  owner_ = value;
}

// optional string user = 5;
inline bool Session::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Session::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Session::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Session::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& Session::user() const {
  return *user_;
}
inline void Session::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Session::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Session::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Session::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* Session::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Session::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string lang = 6;
inline bool Session::has_lang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Session::set_has_lang() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Session::clear_has_lang() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Session::clear_lang() {
  if (lang_ != &::google::protobuf::internal::kEmptyString) {
    lang_->clear();
  }
  clear_has_lang();
}
inline const ::std::string& Session::lang() const {
  return *lang_;
}
inline void Session::set_lang(const ::std::string& value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::kEmptyString) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
}
inline void Session::set_lang(const char* value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::kEmptyString) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
}
inline void Session::set_lang(const char* value, size_t size) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::kEmptyString) {
    lang_ = new ::std::string;
  }
  lang_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Session::mutable_lang() {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::kEmptyString) {
    lang_ = new ::std::string;
  }
  return lang_;
}
inline ::std::string* Session::release_lang() {
  clear_has_lang();
  if (lang_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lang_;
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Session::set_allocated_lang(::std::string* lang) {
  if (lang_ != &::google::protobuf::internal::kEmptyString) {
    delete lang_;
  }
  if (lang) {
    set_has_lang();
    lang_ = lang;
  } else {
    clear_has_lang();
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 10;
inline bool Session::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Session::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Session::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Session::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Session::ip() const {
  return *ip_;
}
inline void Session::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Session::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Session::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Session::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Session::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Session::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 11;
inline bool Session::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Session::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Session::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Session::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 Session::port() const {
  return port_;
}
inline void Session::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional uint32 state = 15;
inline bool Session::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Session::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Session::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Session::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 Session::state() const {
  return state_;
}
inline void Session::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint64 stamp_open = 16;
inline bool Session::has_stamp_open() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Session::set_has_stamp_open() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Session::clear_has_stamp_open() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Session::clear_stamp_open() {
  stamp_open_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp_open();
}
inline ::google::protobuf::uint64 Session::stamp_open() const {
  return stamp_open_;
}
inline void Session::set_stamp_open(::google::protobuf::uint64 value) {
  set_has_stamp_open();
  stamp_open_ = value;
}

// optional uint64 stamp_close = 17;
inline bool Session::has_stamp_close() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Session::set_has_stamp_close() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Session::clear_has_stamp_close() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Session::clear_stamp_close() {
  stamp_close_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp_close();
}
inline ::google::protobuf::uint64 Session::stamp_close() const {
  return stamp_close_;
}
inline void Session::set_stamp_close(::google::protobuf::uint64 value) {
  set_has_stamp_close();
  stamp_close_ = value;
}

// -------------------------------------------------------------------

// SessionCount

// optional uint64 stamp = 1;
inline bool SessionCount::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionCount::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionCount::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionCount::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 SessionCount::stamp() const {
  return stamp_;
}
inline void SessionCount::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
}

// optional uint32 sess_size = 2;
inline bool SessionCount::has_sess_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionCount::set_has_sess_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionCount::clear_has_sess_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionCount::clear_sess_size() {
  sess_size_ = 0u;
  clear_has_sess_size();
}
inline ::google::protobuf::uint32 SessionCount::sess_size() const {
  return sess_size_;
}
inline void SessionCount::set_sess_size(::google::protobuf::uint32 value) {
  set_has_sess_size();
  sess_size_ = value;
}

// optional uint32 conn_size = 3;
inline bool SessionCount::has_conn_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionCount::set_has_conn_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionCount::clear_has_conn_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionCount::clear_conn_size() {
  conn_size_ = 0u;
  clear_has_conn_size();
}
inline ::google::protobuf::uint32 SessionCount::conn_size() const {
  return conn_size_;
}
inline void SessionCount::set_conn_size(::google::protobuf::uint32 value) {
  set_has_conn_size();
  conn_size_ = value;
}

// optional uint32 ddos_size = 4;
inline bool SessionCount::has_ddos_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionCount::set_has_ddos_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionCount::clear_has_ddos_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionCount::clear_ddos_size() {
  ddos_size_ = 0u;
  clear_has_ddos_size();
}
inline ::google::protobuf::uint32 SessionCount::ddos_size() const {
  return ddos_size_;
}
inline void SessionCount::set_ddos_size(::google::protobuf::uint32 value) {
  set_has_ddos_size();
  ddos_size_ = value;
}

// -------------------------------------------------------------------

// SessionExcept

// optional string ip = 1;
inline bool SessionExcept::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionExcept::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionExcept::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionExcept::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SessionExcept::ip() const {
  return *ip_;
}
inline void SessionExcept::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SessionExcept::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SessionExcept::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SessionExcept::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SessionExcept::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SessionExcept::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 stamp = 2;
inline bool SessionExcept::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionExcept::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionExcept::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionExcept::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 SessionExcept::stamp() const {
  return stamp_;
}
inline void SessionExcept::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
}

// optional uint32 except_mode = 5;
inline bool SessionExcept::has_except_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionExcept::set_has_except_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionExcept::clear_has_except_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionExcept::clear_except_mode() {
  except_mode_ = 0u;
  clear_has_except_mode();
}
inline ::google::protobuf::uint32 SessionExcept::except_mode() const {
  return except_mode_;
}
inline void SessionExcept::set_except_mode(::google::protobuf::uint32 value) {
  set_has_except_mode();
  except_mode_ = value;
}

// optional uint32 except_total = 6;
inline bool SessionExcept::has_except_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionExcept::set_has_except_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionExcept::clear_has_except_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionExcept::clear_except_total() {
  except_total_ = 0u;
  clear_has_except_total();
}
inline ::google::protobuf::uint32 SessionExcept::except_total() const {
  return except_total_;
}
inline void SessionExcept::set_except_total(::google::protobuf::uint32 value) {
  set_has_except_total();
  except_total_ = value;
}

// optional uint32 except_size = 7;
inline bool SessionExcept::has_except_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionExcept::set_has_except_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionExcept::clear_has_except_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionExcept::clear_except_size() {
  except_size_ = 0u;
  clear_has_except_size();
}
inline ::google::protobuf::uint32 SessionExcept::except_size() const {
  return except_size_;
}
inline void SessionExcept::set_except_size(::google::protobuf::uint32 value) {
  set_has_except_size();
  except_size_ = value;
}

// -------------------------------------------------------------------

// NetworkCount

// optional uint64 session = 1;
inline bool NetworkCount::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkCount::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkCount::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkCount::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
  clear_has_session();
}
inline ::google::protobuf::uint64 NetworkCount::session() const {
  return session_;
}
inline void NetworkCount::set_session(::google::protobuf::uint64 value) {
  set_has_session();
  session_ = value;
}

// optional uint64 stamp = 2;
inline bool NetworkCount::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkCount::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkCount::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkCount::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 NetworkCount::stamp() const {
  return stamp_;
}
inline void NetworkCount::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
}

// optional uint32 req_size = 10;
inline bool NetworkCount::has_req_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkCount::set_has_req_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkCount::clear_has_req_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkCount::clear_req_size() {
  req_size_ = 0u;
  clear_has_req_size();
}
inline ::google::protobuf::uint32 NetworkCount::req_size() const {
  return req_size_;
}
inline void NetworkCount::set_req_size(::google::protobuf::uint32 value) {
  set_has_req_size();
  req_size_ = value;
}

// optional uint32 rsp_size = 11;
inline bool NetworkCount::has_rsp_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkCount::set_has_rsp_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetworkCount::clear_has_rsp_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetworkCount::clear_rsp_size() {
  rsp_size_ = 0u;
  clear_has_rsp_size();
}
inline ::google::protobuf::uint32 NetworkCount::rsp_size() const {
  return rsp_size_;
}
inline void NetworkCount::set_rsp_size(::google::protobuf::uint32 value) {
  set_has_rsp_size();
  rsp_size_ = value;
}

// optional uint64 req_kbyte = 20;
inline bool NetworkCount::has_req_kbyte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkCount::set_has_req_kbyte() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetworkCount::clear_has_req_kbyte() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetworkCount::clear_req_kbyte() {
  req_kbyte_ = GOOGLE_ULONGLONG(0);
  clear_has_req_kbyte();
}
inline ::google::protobuf::uint64 NetworkCount::req_kbyte() const {
  return req_kbyte_;
}
inline void NetworkCount::set_req_kbyte(::google::protobuf::uint64 value) {
  set_has_req_kbyte();
  req_kbyte_ = value;
}

// optional uint64 rsp_kbyte = 21;
inline bool NetworkCount::has_rsp_kbyte() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetworkCount::set_has_rsp_kbyte() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetworkCount::clear_has_rsp_kbyte() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetworkCount::clear_rsp_kbyte() {
  rsp_kbyte_ = GOOGLE_ULONGLONG(0);
  clear_has_rsp_kbyte();
}
inline ::google::protobuf::uint64 NetworkCount::rsp_kbyte() const {
  return rsp_kbyte_;
}
inline void NetworkCount::set_rsp_kbyte(::google::protobuf::uint64 value) {
  set_has_rsp_kbyte();
  rsp_kbyte_ = value;
}

// -------------------------------------------------------------------

// Service

// optional uint64 stamp = 1;
inline bool Service::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Service::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Service::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Service::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 Service::stamp() const {
  return stamp_;
}
inline void Service::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
}

// -------------------------------------------------------------------

// Logging


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace net
}  // namespace eco

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Monitor_2eproto__INCLUDED
