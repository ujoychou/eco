// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eco {
namespace net {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Session_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionExcept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionExcept_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* Service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Service_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logging_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logging_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Monitor_2eproto() {
  protobuf_AddDesc_Monitor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Monitor.proto");
  GOOGLE_CHECK(file != NULL);
  Session_descriptor_ = file->message_type(0);
  static const int Session_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, stamp_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, stamp_close_),
  };
  Session_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Session_descriptor_,
      Session::default_instance_,
      Session_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Session));
  SessionCount_descriptor_ = file->message_type(1);
  static const int SessionCount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCount, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCount, sess_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCount, conn_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCount, ddos_size_),
  };
  SessionCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionCount_descriptor_,
      SessionCount::default_instance_,
      SessionCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionCount));
  SessionExcept_descriptor_ = file->message_type(2);
  static const int SessionExcept_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionExcept, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionExcept, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionExcept, except_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionExcept, except_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionExcept, except_size_),
  };
  SessionExcept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionExcept_descriptor_,
      SessionExcept::default_instance_,
      SessionExcept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionExcept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionExcept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionExcept));
  NetworkCount_descriptor_ = file->message_type(3);
  static const int NetworkCount_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCount, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCount, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCount, req_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCount, rsp_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCount, req_kbyte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCount, rsp_kbyte_),
  };
  NetworkCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkCount_descriptor_,
      NetworkCount::default_instance_,
      NetworkCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkCount));
  Service_descriptor_ = file->message_type(4);
  static const int Service_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, stamp_),
  };
  Service_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Service_descriptor_,
      Service::default_instance_,
      Service_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Service));
  Logging_descriptor_ = file->message_type(5);
  static const int Logging_offsets_[1] = {
  };
  Logging_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logging_descriptor_,
      Logging::default_instance_,
      Logging_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logging, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logging, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logging));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Monitor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Session_descriptor_, &Session::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionCount_descriptor_, &SessionCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionExcept_descriptor_, &SessionExcept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkCount_descriptor_, &NetworkCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Service_descriptor_, &Service::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logging_descriptor_, &Logging::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Monitor_2eproto() {
  delete Session::default_instance_;
  delete Session_reflection_;
  delete SessionCount::default_instance_;
  delete SessionCount_reflection_;
  delete SessionExcept::default_instance_;
  delete SessionExcept_reflection_;
  delete NetworkCount::default_instance_;
  delete NetworkCount_reflection_;
  delete Service::default_instance_;
  delete Service_reflection_;
  delete Logging::default_instance_;
  delete Logging_reflection_;
}

void protobuf_AddDesc_Monitor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMonitor.proto\022\reco.net.proto\"\222\001\n\007Sessi"
    "on\022\n\n\002id\030\001 \001(\004\022\r\n\005owner\030\002 \001(\r\022\014\n\004user\030\005 "
    "\001(\t\022\014\n\004lang\030\006 \001(\t\022\n\n\002ip\030\n \001(\t\022\014\n\004port\030\013 "
    "\001(\r\022\r\n\005state\030\017 \001(\r\022\022\n\nstamp_open\030\020 \001(\004\022\023"
    "\n\013stamp_close\030\021 \001(\004\"V\n\014SessionCount\022\r\n\005s"
    "tamp\030\001 \001(\004\022\021\n\tsess_size\030\002 \001(\r\022\021\n\tconn_si"
    "ze\030\003 \001(\r\022\021\n\tddos_size\030\004 \001(\r\"j\n\rSessionEx"
    "cept\022\n\n\002ip\030\001 \001(\t\022\r\n\005stamp\030\002 \001(\004\022\023\n\013excep"
    "t_mode\030\005 \001(\r\022\024\n\014except_total\030\006 \001(\r\022\023\n\013ex"
    "cept_size\030\007 \001(\r\"x\n\014NetworkCount\022\017\n\007sessi"
    "on\030\001 \001(\004\022\r\n\005stamp\030\002 \001(\004\022\020\n\010req_size\030\n \001("
    "\r\022\020\n\010rsp_size\030\013 \001(\r\022\021\n\treq_kbyte\030\024 \001(\004\022\021"
    "\n\trsp_kbyte\030\025 \001(\004\"\030\n\007Service\022\r\n\005stamp\030\001 "
    "\001(\004\"\t\n\007Logging", 534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Monitor.proto", &protobuf_RegisterTypes);
  Session::default_instance_ = new Session();
  SessionCount::default_instance_ = new SessionCount();
  SessionExcept::default_instance_ = new SessionExcept();
  NetworkCount::default_instance_ = new NetworkCount();
  Service::default_instance_ = new Service();
  Logging::default_instance_ = new Logging();
  Session::default_instance_->InitAsDefaultInstance();
  SessionCount::default_instance_->InitAsDefaultInstance();
  SessionExcept::default_instance_->InitAsDefaultInstance();
  NetworkCount::default_instance_->InitAsDefaultInstance();
  Service::default_instance_->InitAsDefaultInstance();
  Logging::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Monitor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Monitor_2eproto {
  StaticDescriptorInitializer_Monitor_2eproto() {
    protobuf_AddDesc_Monitor_2eproto();
  }
} static_descriptor_initializer_Monitor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Session::kIdFieldNumber;
const int Session::kOwnerFieldNumber;
const int Session::kUserFieldNumber;
const int Session::kLangFieldNumber;
const int Session::kIpFieldNumber;
const int Session::kPortFieldNumber;
const int Session::kStateFieldNumber;
const int Session::kStampOpenFieldNumber;
const int Session::kStampCloseFieldNumber;
#endif  // !_MSC_VER

Session::Session()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Session::InitAsDefaultInstance() {
}

Session::Session(const Session& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Session::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  owner_ = 0u;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  state_ = 0u;
  stamp_open_ = GOOGLE_ULONGLONG(0);
  stamp_close_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Session::~Session() {
  SharedDtor();
}

void Session::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (lang_ != &::google::protobuf::internal::kEmptyString) {
    delete lang_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Session_descriptor_;
}

const Session& Session::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Monitor_2eproto();
  return *default_instance_;
}

Session* Session::default_instance_ = NULL;

Session* Session::New() const {
  return new Session;
}

void Session::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    owner_ = 0u;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::kEmptyString) {
        lang_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    state_ = 0u;
    stamp_open_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    stamp_close_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }

      // optional uint32 owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_lang;
        break;
      }

      // optional string lang = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ip;
        break;
      }

      // optional string ip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_port;
        break;
      }

      // optional uint32 port = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_state;
        break;
      }

      // optional uint32 state = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_stamp_open;
        break;
      }

      // optional uint64 stamp_open = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_open_)));
          set_has_stamp_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_stamp_close;
        break;
      }

      // optional uint64 stamp_close = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_close_)));
          set_has_stamp_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner(), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional string lang = 6;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->lang(), output);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->ip(), output);
  }

  // optional uint32 port = 11;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->port(), output);
  }

  // optional uint32 state = 15;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->state(), output);
  }

  // optional uint64 stamp_open = 16;
  if (has_stamp_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->stamp_open(), output);
  }

  // optional uint64 stamp_close = 17;
  if (has_stamp_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->stamp_close(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Session::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 owner = 2;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner(), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional string lang = 6;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lang(), target);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ip(), target);
  }

  // optional uint32 port = 11;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->port(), target);
  }

  // optional uint32 state = 15;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->state(), target);
  }

  // optional uint64 stamp_open = 16;
  if (has_stamp_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->stamp_open(), target);
  }

  // optional uint64 stamp_close = 17;
  if (has_stamp_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->stamp_close(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Session::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner());
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string lang = 6;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

    // optional string ip = 10;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 11;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 state = 15;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint64 stamp_open = 16;
    if (has_stamp_open()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stamp_open());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 stamp_close = 17;
    if (has_stamp_close()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stamp_close());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Session* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Session*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_stamp_open()) {
      set_stamp_open(from.stamp_open());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stamp_close()) {
      set_stamp_close(from.stamp_close());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {

  return true;
}

void Session::Swap(Session* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(owner_, other->owner_);
    std::swap(user_, other->user_);
    std::swap(lang_, other->lang_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(state_, other->state_);
    std::swap(stamp_open_, other->stamp_open_);
    std::swap(stamp_close_, other->stamp_close_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Session_descriptor_;
  metadata.reflection = Session_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionCount::kStampFieldNumber;
const int SessionCount::kSessSizeFieldNumber;
const int SessionCount::kConnSizeFieldNumber;
const int SessionCount::kDdosSizeFieldNumber;
#endif  // !_MSC_VER

SessionCount::SessionCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionCount::InitAsDefaultInstance() {
}

SessionCount::SessionCount(const SessionCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionCount::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = GOOGLE_ULONGLONG(0);
  sess_size_ = 0u;
  conn_size_ = 0u;
  ddos_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionCount::~SessionCount() {
  SharedDtor();
}

void SessionCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SessionCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionCount_descriptor_;
}

const SessionCount& SessionCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Monitor_2eproto();
  return *default_instance_;
}

SessionCount* SessionCount::default_instance_ = NULL;

SessionCount* SessionCount::New() const {
  return new SessionCount;
}

void SessionCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stamp_ = GOOGLE_ULONGLONG(0);
    sess_size_ = 0u;
    conn_size_ = 0u;
    ddos_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sess_size;
        break;
      }

      // optional uint32 sess_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sess_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sess_size_)));
          set_has_sess_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_conn_size;
        break;
      }

      // optional uint32 conn_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conn_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conn_size_)));
          set_has_conn_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ddos_size;
        break;
      }

      // optional uint32 ddos_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ddos_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddos_size_)));
          set_has_ddos_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stamp(), output);
  }

  // optional uint32 sess_size = 2;
  if (has_sess_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sess_size(), output);
  }

  // optional uint32 conn_size = 3;
  if (has_conn_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->conn_size(), output);
  }

  // optional uint32 ddos_size = 4;
  if (has_ddos_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ddos_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stamp(), target);
  }

  // optional uint32 sess_size = 2;
  if (has_sess_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sess_size(), target);
  }

  // optional uint32 conn_size = 3;
  if (has_conn_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->conn_size(), target);
  }

  // optional uint32 ddos_size = 4;
  if (has_ddos_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ddos_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stamp());
    }

    // optional uint32 sess_size = 2;
    if (has_sess_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sess_size());
    }

    // optional uint32 conn_size = 3;
    if (has_conn_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conn_size());
    }

    // optional uint32 ddos_size = 4;
    if (has_ddos_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ddos_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionCount::MergeFrom(const SessionCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
    if (from.has_sess_size()) {
      set_sess_size(from.sess_size());
    }
    if (from.has_conn_size()) {
      set_conn_size(from.conn_size());
    }
    if (from.has_ddos_size()) {
      set_ddos_size(from.ddos_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionCount::CopyFrom(const SessionCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionCount::IsInitialized() const {

  return true;
}

void SessionCount::Swap(SessionCount* other) {
  if (other != this) {
    std::swap(stamp_, other->stamp_);
    std::swap(sess_size_, other->sess_size_);
    std::swap(conn_size_, other->conn_size_);
    std::swap(ddos_size_, other->ddos_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionCount_descriptor_;
  metadata.reflection = SessionCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionExcept::kIpFieldNumber;
const int SessionExcept::kStampFieldNumber;
const int SessionExcept::kExceptModeFieldNumber;
const int SessionExcept::kExceptTotalFieldNumber;
const int SessionExcept::kExceptSizeFieldNumber;
#endif  // !_MSC_VER

SessionExcept::SessionExcept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionExcept::InitAsDefaultInstance() {
}

SessionExcept::SessionExcept(const SessionExcept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionExcept::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stamp_ = GOOGLE_ULONGLONG(0);
  except_mode_ = 0u;
  except_total_ = 0u;
  except_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionExcept::~SessionExcept() {
  SharedDtor();
}

void SessionExcept::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void SessionExcept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionExcept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionExcept_descriptor_;
}

const SessionExcept& SessionExcept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Monitor_2eproto();
  return *default_instance_;
}

SessionExcept* SessionExcept::default_instance_ = NULL;

SessionExcept* SessionExcept::New() const {
  return new SessionExcept;
}

void SessionExcept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    stamp_ = GOOGLE_ULONGLONG(0);
    except_mode_ = 0u;
    except_total_ = 0u;
    except_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionExcept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stamp;
        break;
      }

      // optional uint64 stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_except_mode;
        break;
      }

      // optional uint32 except_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_except_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &except_mode_)));
          set_has_except_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_except_total;
        break;
      }

      // optional uint32 except_total = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_except_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &except_total_)));
          set_has_except_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_except_size;
        break;
      }

      // optional uint32 except_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_except_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &except_size_)));
          set_has_except_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionExcept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // optional uint64 stamp = 2;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stamp(), output);
  }

  // optional uint32 except_mode = 5;
  if (has_except_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->except_mode(), output);
  }

  // optional uint32 except_total = 6;
  if (has_except_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->except_total(), output);
  }

  // optional uint32 except_size = 7;
  if (has_except_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->except_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionExcept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint64 stamp = 2;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stamp(), target);
  }

  // optional uint32 except_mode = 5;
  if (has_except_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->except_mode(), target);
  }

  // optional uint32 except_total = 6;
  if (has_except_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->except_total(), target);
  }

  // optional uint32 except_size = 7;
  if (has_except_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->except_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionExcept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint64 stamp = 2;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stamp());
    }

    // optional uint32 except_mode = 5;
    if (has_except_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->except_mode());
    }

    // optional uint32 except_total = 6;
    if (has_except_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->except_total());
    }

    // optional uint32 except_size = 7;
    if (has_except_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->except_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionExcept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionExcept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionExcept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionExcept::MergeFrom(const SessionExcept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
    if (from.has_except_mode()) {
      set_except_mode(from.except_mode());
    }
    if (from.has_except_total()) {
      set_except_total(from.except_total());
    }
    if (from.has_except_size()) {
      set_except_size(from.except_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionExcept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionExcept::CopyFrom(const SessionExcept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionExcept::IsInitialized() const {

  return true;
}

void SessionExcept::Swap(SessionExcept* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(stamp_, other->stamp_);
    std::swap(except_mode_, other->except_mode_);
    std::swap(except_total_, other->except_total_);
    std::swap(except_size_, other->except_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionExcept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionExcept_descriptor_;
  metadata.reflection = SessionExcept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkCount::kSessionFieldNumber;
const int NetworkCount::kStampFieldNumber;
const int NetworkCount::kReqSizeFieldNumber;
const int NetworkCount::kRspSizeFieldNumber;
const int NetworkCount::kReqKbyteFieldNumber;
const int NetworkCount::kRspKbyteFieldNumber;
#endif  // !_MSC_VER

NetworkCount::NetworkCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkCount::InitAsDefaultInstance() {
}

NetworkCount::NetworkCount(const NetworkCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkCount::SharedCtor() {
  _cached_size_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
  stamp_ = GOOGLE_ULONGLONG(0);
  req_size_ = 0u;
  rsp_size_ = 0u;
  req_kbyte_ = GOOGLE_ULONGLONG(0);
  rsp_kbyte_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkCount::~NetworkCount() {
  SharedDtor();
}

void NetworkCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkCount_descriptor_;
}

const NetworkCount& NetworkCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Monitor_2eproto();
  return *default_instance_;
}

NetworkCount* NetworkCount::default_instance_ = NULL;

NetworkCount* NetworkCount::New() const {
  return new NetworkCount;
}

void NetworkCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_ = GOOGLE_ULONGLONG(0);
    stamp_ = GOOGLE_ULONGLONG(0);
    req_size_ = 0u;
    rsp_size_ = 0u;
    req_kbyte_ = GOOGLE_ULONGLONG(0);
    rsp_kbyte_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stamp;
        break;
      }

      // optional uint64 stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_req_size;
        break;
      }

      // optional uint32 req_size = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_size_)));
          set_has_req_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rsp_size;
        break;
      }

      // optional uint32 rsp_size = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rsp_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rsp_size_)));
          set_has_rsp_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_req_kbyte;
        break;
      }

      // optional uint64 req_kbyte = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_kbyte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_kbyte_)));
          set_has_req_kbyte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_rsp_kbyte;
        break;
      }

      // optional uint64 rsp_kbyte = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rsp_kbyte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rsp_kbyte_)));
          set_has_rsp_kbyte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->session(), output);
  }

  // optional uint64 stamp = 2;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stamp(), output);
  }

  // optional uint32 req_size = 10;
  if (has_req_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->req_size(), output);
  }

  // optional uint32 rsp_size = 11;
  if (has_rsp_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->rsp_size(), output);
  }

  // optional uint64 req_kbyte = 20;
  if (has_req_kbyte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->req_kbyte(), output);
  }

  // optional uint64 rsp_kbyte = 21;
  if (has_rsp_kbyte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->rsp_kbyte(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->session(), target);
  }

  // optional uint64 stamp = 2;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stamp(), target);
  }

  // optional uint32 req_size = 10;
  if (has_req_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->req_size(), target);
  }

  // optional uint32 rsp_size = 11;
  if (has_rsp_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->rsp_size(), target);
  }

  // optional uint64 req_kbyte = 20;
  if (has_req_kbyte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->req_kbyte(), target);
  }

  // optional uint64 rsp_kbyte = 21;
  if (has_rsp_kbyte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->rsp_kbyte(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session());
    }

    // optional uint64 stamp = 2;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stamp());
    }

    // optional uint32 req_size = 10;
    if (has_req_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_size());
    }

    // optional uint32 rsp_size = 11;
    if (has_rsp_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rsp_size());
    }

    // optional uint64 req_kbyte = 20;
    if (has_req_kbyte()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->req_kbyte());
    }

    // optional uint64 rsp_kbyte = 21;
    if (has_rsp_kbyte()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rsp_kbyte());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkCount::MergeFrom(const NetworkCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
    if (from.has_req_size()) {
      set_req_size(from.req_size());
    }
    if (from.has_rsp_size()) {
      set_rsp_size(from.rsp_size());
    }
    if (from.has_req_kbyte()) {
      set_req_kbyte(from.req_kbyte());
    }
    if (from.has_rsp_kbyte()) {
      set_rsp_kbyte(from.rsp_kbyte());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkCount::CopyFrom(const NetworkCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCount::IsInitialized() const {

  return true;
}

void NetworkCount::Swap(NetworkCount* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(stamp_, other->stamp_);
    std::swap(req_size_, other->req_size_);
    std::swap(rsp_size_, other->rsp_size_);
    std::swap(req_kbyte_, other->req_kbyte_);
    std::swap(rsp_kbyte_, other->rsp_kbyte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkCount_descriptor_;
  metadata.reflection = NetworkCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Service::kStampFieldNumber;
#endif  // !_MSC_VER

Service::Service()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Service::InitAsDefaultInstance() {
}

Service::Service(const Service& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Service::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Service::~Service() {
  SharedDtor();
}

void Service::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_descriptor_;
}

const Service& Service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Monitor_2eproto();
  return *default_instance_;
}

Service* Service::default_instance_ = NULL;

Service* Service::New() const {
  return new Service;
}

void Service::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Service::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Service::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Service* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Service*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Service::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {

  return true;
}

void Service::Swap(Service* other) {
  if (other != this) {
    std::swap(stamp_, other->stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Service_descriptor_;
  metadata.reflection = Service_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Logging::Logging()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Logging::InitAsDefaultInstance() {
}

Logging::Logging(const Logging& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logging::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logging::~Logging() {
  SharedDtor();
}

void Logging::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Logging::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logging::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logging_descriptor_;
}

const Logging& Logging::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Monitor_2eproto();
  return *default_instance_;
}

Logging* Logging::default_instance_ = NULL;

Logging* Logging::New() const {
  return new Logging;
}

void Logging::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logging::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Logging::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logging::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logging::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logging::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logging* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logging*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logging::MergeFrom(const Logging& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logging::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logging::CopyFrom(const Logging& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logging::IsInitialized() const {

  return true;
}

void Logging::Swap(Logging* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logging::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logging_descriptor_;
  metadata.reflection = Logging_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace net
}  // namespace eco

// @@protoc_insertion_point(global_scope)
