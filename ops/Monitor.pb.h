// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#ifndef PROTOBUF_Monitor_2eproto__INCLUDED
#define PROTOBUF_Monitor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Monitor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSessionImpl();
void InitDefaultsSession();
void InitDefaultsSessionCountImpl();
void InitDefaultsSessionCount();
void InitDefaultsSessionExceptImpl();
void InitDefaultsSessionExcept();
void InitDefaultsNetworkCountImpl();
void InitDefaultsNetworkCount();
void InitDefaultsServiceImpl();
void InitDefaultsService();
void InitDefaultsLoggingImpl();
void InitDefaultsLogging();
inline void InitDefaults() {
  InitDefaultsSession();
  InitDefaultsSessionCount();
  InitDefaultsSessionExcept();
  InitDefaultsNetworkCount();
  InitDefaultsService();
  InitDefaultsLogging();
}
}  // namespace protobuf_Monitor_2eproto
namespace eco {
namespace net {
namespace proto {
class Logging;
class LoggingDefaultTypeInternal;
extern LoggingDefaultTypeInternal _Logging_default_instance_;
class NetworkCount;
class NetworkCountDefaultTypeInternal;
extern NetworkCountDefaultTypeInternal _NetworkCount_default_instance_;
class Service;
class ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionCount;
class SessionCountDefaultTypeInternal;
extern SessionCountDefaultTypeInternal _SessionCount_default_instance_;
class SessionExcept;
class SessionExceptDefaultTypeInternal;
extern SessionExceptDefaultTypeInternal _SessionExcept_default_instance_;
}  // namespace proto
}  // namespace net
}  // namespace eco
namespace eco {
namespace net {
namespace proto {

// ===================================================================

class Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Session* other);
  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const PROTOBUF_FINAL { return New(NULL); }

  Session* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 5;
  void clear_user();
  static const int kUserFieldNumber = 5;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string lang = 6;
  void clear_lang();
  static const int kLangFieldNumber = 6;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  #if LANG_CXX11
  void set_lang(::std::string&& value);
  #endif
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // string ip = 10;
  void clear_ip();
  static const int kIpFieldNumber = 10;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 owner = 2;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  ::google::protobuf::uint32 owner() const;
  void set_owner(::google::protobuf::uint32 value);

  // uint32 port = 11;
  void clear_port();
  static const int kPortFieldNumber = 11;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 state = 15;
  void clear_state();
  static const int kStateFieldNumber = 15;
  ::google::protobuf::uint32 state() const;
  void set_state(::google::protobuf::uint32 value);

  // uint64 stamp_open = 16;
  void clear_stamp_open();
  static const int kStampOpenFieldNumber = 16;
  ::google::protobuf::uint64 stamp_open() const;
  void set_stamp_open(::google::protobuf::uint64 value);

  // uint64 stamp_close = 17;
  void clear_stamp_close();
  static const int kStampCloseFieldNumber = 17;
  ::google::protobuf::uint64 stamp_close() const;
  void set_stamp_close(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eco.net.proto.Session)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 owner_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint64 stamp_open_;
  ::google::protobuf::uint64 stamp_close_;
  mutable int _cached_size_;
  friend struct ::protobuf_Monitor_2eproto::TableStruct;
  friend void ::protobuf_Monitor_2eproto::InitDefaultsSessionImpl();
};
// -------------------------------------------------------------------

class SessionCount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.SessionCount) */ {
 public:
  SessionCount();
  virtual ~SessionCount();

  SessionCount(const SessionCount& from);

  inline SessionCount& operator=(const SessionCount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionCount(SessionCount&& from) noexcept
    : SessionCount() {
    *this = ::std::move(from);
  }

  inline SessionCount& operator=(SessionCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionCount* internal_default_instance() {
    return reinterpret_cast<const SessionCount*>(
               &_SessionCount_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SessionCount* other);
  friend void swap(SessionCount& a, SessionCount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionCount* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionCount* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionCount& from);
  void MergeFrom(const SessionCount& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionCount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 stamp = 1;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // uint32 sess_size = 2;
  void clear_sess_size();
  static const int kSessSizeFieldNumber = 2;
  ::google::protobuf::uint32 sess_size() const;
  void set_sess_size(::google::protobuf::uint32 value);

  // uint32 conn_size = 3;
  void clear_conn_size();
  static const int kConnSizeFieldNumber = 3;
  ::google::protobuf::uint32 conn_size() const;
  void set_conn_size(::google::protobuf::uint32 value);

  // uint32 ddos_size = 4;
  void clear_ddos_size();
  static const int kDdosSizeFieldNumber = 4;
  ::google::protobuf::uint32 ddos_size() const;
  void set_ddos_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eco.net.proto.SessionCount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::uint32 sess_size_;
  ::google::protobuf::uint32 conn_size_;
  ::google::protobuf::uint32 ddos_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_Monitor_2eproto::TableStruct;
  friend void ::protobuf_Monitor_2eproto::InitDefaultsSessionCountImpl();
};
// -------------------------------------------------------------------

class SessionExcept : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.SessionExcept) */ {
 public:
  SessionExcept();
  virtual ~SessionExcept();

  SessionExcept(const SessionExcept& from);

  inline SessionExcept& operator=(const SessionExcept& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionExcept(SessionExcept&& from) noexcept
    : SessionExcept() {
    *this = ::std::move(from);
  }

  inline SessionExcept& operator=(SessionExcept&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionExcept& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionExcept* internal_default_instance() {
    return reinterpret_cast<const SessionExcept*>(
               &_SessionExcept_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SessionExcept* other);
  friend void swap(SessionExcept& a, SessionExcept& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionExcept* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionExcept* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionExcept& from);
  void MergeFrom(const SessionExcept& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionExcept* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint64 stamp = 2;
  void clear_stamp();
  static const int kStampFieldNumber = 2;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // uint32 except_mode = 5;
  void clear_except_mode();
  static const int kExceptModeFieldNumber = 5;
  ::google::protobuf::uint32 except_mode() const;
  void set_except_mode(::google::protobuf::uint32 value);

  // uint32 except_total = 6;
  void clear_except_total();
  static const int kExceptTotalFieldNumber = 6;
  ::google::protobuf::uint32 except_total() const;
  void set_except_total(::google::protobuf::uint32 value);

  // uint32 except_size = 7;
  void clear_except_size();
  static const int kExceptSizeFieldNumber = 7;
  ::google::protobuf::uint32 except_size() const;
  void set_except_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eco.net.proto.SessionExcept)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::uint32 except_mode_;
  ::google::protobuf::uint32 except_total_;
  ::google::protobuf::uint32 except_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_Monitor_2eproto::TableStruct;
  friend void ::protobuf_Monitor_2eproto::InitDefaultsSessionExceptImpl();
};
// -------------------------------------------------------------------

class NetworkCount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.NetworkCount) */ {
 public:
  NetworkCount();
  virtual ~NetworkCount();

  NetworkCount(const NetworkCount& from);

  inline NetworkCount& operator=(const NetworkCount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkCount(NetworkCount&& from) noexcept
    : NetworkCount() {
    *this = ::std::move(from);
  }

  inline NetworkCount& operator=(NetworkCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkCount* internal_default_instance() {
    return reinterpret_cast<const NetworkCount*>(
               &_NetworkCount_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(NetworkCount* other);
  friend void swap(NetworkCount& a, NetworkCount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkCount* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkCount* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetworkCount& from);
  void MergeFrom(const NetworkCount& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetworkCount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 session = 1;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  ::google::protobuf::uint64 session() const;
  void set_session(::google::protobuf::uint64 value);

  // uint64 stamp = 2;
  void clear_stamp();
  static const int kStampFieldNumber = 2;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // uint32 req_size = 10;
  void clear_req_size();
  static const int kReqSizeFieldNumber = 10;
  ::google::protobuf::uint32 req_size() const;
  void set_req_size(::google::protobuf::uint32 value);

  // uint32 rsp_size = 11;
  void clear_rsp_size();
  static const int kRspSizeFieldNumber = 11;
  ::google::protobuf::uint32 rsp_size() const;
  void set_rsp_size(::google::protobuf::uint32 value);

  // uint64 req_kbyte = 20;
  void clear_req_kbyte();
  static const int kReqKbyteFieldNumber = 20;
  ::google::protobuf::uint64 req_kbyte() const;
  void set_req_kbyte(::google::protobuf::uint64 value);

  // uint64 rsp_kbyte = 21;
  void clear_rsp_kbyte();
  static const int kRspKbyteFieldNumber = 21;
  ::google::protobuf::uint64 rsp_kbyte() const;
  void set_rsp_kbyte(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eco.net.proto.NetworkCount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 session_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::uint32 req_size_;
  ::google::protobuf::uint32 rsp_size_;
  ::google::protobuf::uint64 req_kbyte_;
  ::google::protobuf::uint64 rsp_kbyte_;
  mutable int _cached_size_;
  friend struct ::protobuf_Monitor_2eproto::TableStruct;
  friend void ::protobuf_Monitor_2eproto::InitDefaultsNetworkCountImpl();
};
// -------------------------------------------------------------------

class Service : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Service* other);
  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const PROTOBUF_FINAL { return New(NULL); }

  Service* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Service* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 stamp = 1;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eco.net.proto.Service)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 stamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_Monitor_2eproto::TableStruct;
  friend void ::protobuf_Monitor_2eproto::InitDefaultsServiceImpl();
};
// -------------------------------------------------------------------

class Logging : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.net.proto.Logging) */ {
 public:
  Logging();
  virtual ~Logging();

  Logging(const Logging& from);

  inline Logging& operator=(const Logging& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Logging(Logging&& from) noexcept
    : Logging() {
    *this = ::std::move(from);
  }

  inline Logging& operator=(Logging&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logging& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Logging* internal_default_instance() {
    return reinterpret_cast<const Logging*>(
               &_Logging_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Logging* other);
  friend void swap(Logging& a, Logging& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Logging* New() const PROTOBUF_FINAL { return New(NULL); }

  Logging* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Logging& from);
  void MergeFrom(const Logging& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Logging* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:eco.net.proto.Logging)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_Monitor_2eproto::TableStruct;
  friend void ::protobuf_Monitor_2eproto::InitDefaultsLoggingImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// uint64 id = 1;
inline void Session::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::id() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.id)
  return id_;
}
inline void Session::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.id)
}

// uint32 owner = 2;
inline void Session::clear_owner() {
  owner_ = 0u;
}
inline ::google::protobuf::uint32 Session::owner() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.owner)
  return owner_;
}
inline void Session::set_owner(::google::protobuf::uint32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.owner)
}

// string user = 5;
inline void Session::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session::user() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.user)
  return user_.GetNoArena();
}
inline void Session::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.user)
}
#if LANG_CXX11
inline void Session::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.net.proto.Session.user)
}
#endif
inline void Session::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.net.proto.Session.user)
}
inline void Session::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.net.proto.Session.user)
}
inline ::std::string* Session::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:eco.net.proto.Session.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_user() {
  // @@protoc_insertion_point(field_release:eco.net.proto.Session.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:eco.net.proto.Session.user)
}

// string lang = 6;
inline void Session::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session::lang() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.lang)
  return lang_.GetNoArena();
}
inline void Session::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.lang)
}
#if LANG_CXX11
inline void Session::set_lang(::std::string&& value) {
  
  lang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.net.proto.Session.lang)
}
#endif
inline void Session::set_lang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.net.proto.Session.lang)
}
inline void Session::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.net.proto.Session.lang)
}
inline ::std::string* Session::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:eco.net.proto.Session.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_lang() {
  // @@protoc_insertion_point(field_release:eco.net.proto.Session.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:eco.net.proto.Session.lang)
}

// string ip = 10;
inline void Session::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session::ip() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.ip)
  return ip_.GetNoArena();
}
inline void Session::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.ip)
}
#if LANG_CXX11
inline void Session::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.net.proto.Session.ip)
}
#endif
inline void Session::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.net.proto.Session.ip)
}
inline void Session::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.net.proto.Session.ip)
}
inline ::std::string* Session::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:eco.net.proto.Session.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_ip() {
  // @@protoc_insertion_point(field_release:eco.net.proto.Session.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:eco.net.proto.Session.ip)
}

// uint32 port = 11;
inline void Session::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Session::port() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.port)
  return port_;
}
inline void Session::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.port)
}

// uint32 state = 15;
inline void Session::clear_state() {
  state_ = 0u;
}
inline ::google::protobuf::uint32 Session::state() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.state)
  return state_;
}
inline void Session::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.state)
}

// uint64 stamp_open = 16;
inline void Session::clear_stamp_open() {
  stamp_open_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::stamp_open() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.stamp_open)
  return stamp_open_;
}
inline void Session::set_stamp_open(::google::protobuf::uint64 value) {
  
  stamp_open_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.stamp_open)
}

// uint64 stamp_close = 17;
inline void Session::clear_stamp_close() {
  stamp_close_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::stamp_close() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Session.stamp_close)
  return stamp_close_;
}
inline void Session::set_stamp_close(::google::protobuf::uint64 value) {
  
  stamp_close_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.Session.stamp_close)
}

// -------------------------------------------------------------------

// SessionCount

// uint64 stamp = 1;
inline void SessionCount::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SessionCount::stamp() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionCount.stamp)
  return stamp_;
}
inline void SessionCount::set_stamp(::google::protobuf::uint64 value) {
  
  stamp_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionCount.stamp)
}

// uint32 sess_size = 2;
inline void SessionCount::clear_sess_size() {
  sess_size_ = 0u;
}
inline ::google::protobuf::uint32 SessionCount::sess_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionCount.sess_size)
  return sess_size_;
}
inline void SessionCount::set_sess_size(::google::protobuf::uint32 value) {
  
  sess_size_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionCount.sess_size)
}

// uint32 conn_size = 3;
inline void SessionCount::clear_conn_size() {
  conn_size_ = 0u;
}
inline ::google::protobuf::uint32 SessionCount::conn_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionCount.conn_size)
  return conn_size_;
}
inline void SessionCount::set_conn_size(::google::protobuf::uint32 value) {
  
  conn_size_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionCount.conn_size)
}

// uint32 ddos_size = 4;
inline void SessionCount::clear_ddos_size() {
  ddos_size_ = 0u;
}
inline ::google::protobuf::uint32 SessionCount::ddos_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionCount.ddos_size)
  return ddos_size_;
}
inline void SessionCount::set_ddos_size(::google::protobuf::uint32 value) {
  
  ddos_size_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionCount.ddos_size)
}

// -------------------------------------------------------------------

// SessionExcept

// string ip = 1;
inline void SessionExcept::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionExcept::ip() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionExcept.ip)
  return ip_.GetNoArena();
}
inline void SessionExcept::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionExcept.ip)
}
#if LANG_CXX11
inline void SessionExcept::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.net.proto.SessionExcept.ip)
}
#endif
inline void SessionExcept::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.net.proto.SessionExcept.ip)
}
inline void SessionExcept::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.net.proto.SessionExcept.ip)
}
inline ::std::string* SessionExcept::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:eco.net.proto.SessionExcept.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionExcept::release_ip() {
  // @@protoc_insertion_point(field_release:eco.net.proto.SessionExcept.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionExcept::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:eco.net.proto.SessionExcept.ip)
}

// uint64 stamp = 2;
inline void SessionExcept::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SessionExcept::stamp() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionExcept.stamp)
  return stamp_;
}
inline void SessionExcept::set_stamp(::google::protobuf::uint64 value) {
  
  stamp_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionExcept.stamp)
}

// uint32 except_mode = 5;
inline void SessionExcept::clear_except_mode() {
  except_mode_ = 0u;
}
inline ::google::protobuf::uint32 SessionExcept::except_mode() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionExcept.except_mode)
  return except_mode_;
}
inline void SessionExcept::set_except_mode(::google::protobuf::uint32 value) {
  
  except_mode_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionExcept.except_mode)
}

// uint32 except_total = 6;
inline void SessionExcept::clear_except_total() {
  except_total_ = 0u;
}
inline ::google::protobuf::uint32 SessionExcept::except_total() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionExcept.except_total)
  return except_total_;
}
inline void SessionExcept::set_except_total(::google::protobuf::uint32 value) {
  
  except_total_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionExcept.except_total)
}

// uint32 except_size = 7;
inline void SessionExcept::clear_except_size() {
  except_size_ = 0u;
}
inline ::google::protobuf::uint32 SessionExcept::except_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.SessionExcept.except_size)
  return except_size_;
}
inline void SessionExcept::set_except_size(::google::protobuf::uint32 value) {
  
  except_size_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.SessionExcept.except_size)
}

// -------------------------------------------------------------------

// NetworkCount

// uint64 session = 1;
inline void NetworkCount::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkCount::session() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.session)
  return session_;
}
inline void NetworkCount::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.session)
}

// uint64 stamp = 2;
inline void NetworkCount::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkCount::stamp() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.stamp)
  return stamp_;
}
inline void NetworkCount::set_stamp(::google::protobuf::uint64 value) {
  
  stamp_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.stamp)
}

// uint32 req_size = 10;
inline void NetworkCount::clear_req_size() {
  req_size_ = 0u;
}
inline ::google::protobuf::uint32 NetworkCount::req_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.req_size)
  return req_size_;
}
inline void NetworkCount::set_req_size(::google::protobuf::uint32 value) {
  
  req_size_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.req_size)
}

// uint32 rsp_size = 11;
inline void NetworkCount::clear_rsp_size() {
  rsp_size_ = 0u;
}
inline ::google::protobuf::uint32 NetworkCount::rsp_size() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.rsp_size)
  return rsp_size_;
}
inline void NetworkCount::set_rsp_size(::google::protobuf::uint32 value) {
  
  rsp_size_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.rsp_size)
}

// uint64 req_kbyte = 20;
inline void NetworkCount::clear_req_kbyte() {
  req_kbyte_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkCount::req_kbyte() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.req_kbyte)
  return req_kbyte_;
}
inline void NetworkCount::set_req_kbyte(::google::protobuf::uint64 value) {
  
  req_kbyte_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.req_kbyte)
}

// uint64 rsp_kbyte = 21;
inline void NetworkCount::clear_rsp_kbyte() {
  rsp_kbyte_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkCount::rsp_kbyte() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.NetworkCount.rsp_kbyte)
  return rsp_kbyte_;
}
inline void NetworkCount::set_rsp_kbyte(::google::protobuf::uint64 value) {
  
  rsp_kbyte_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.NetworkCount.rsp_kbyte)
}

// -------------------------------------------------------------------

// Service

// uint64 stamp = 1;
inline void Service::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Service::stamp() const {
  // @@protoc_insertion_point(field_get:eco.net.proto.Service.stamp)
  return stamp_;
}
inline void Service::set_stamp(::google::protobuf::uint64 value) {
  
  stamp_ = value;
  // @@protoc_insertion_point(field_set:eco.net.proto.Service.stamp)
}

// -------------------------------------------------------------------

// Logging

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace net
}  // namespace eco

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Monitor_2eproto__INCLUDED
