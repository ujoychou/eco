// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#include "Monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace eco {
namespace net {
namespace proto {
class SessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Session>
      _instance;
} _Session_default_instance_;
class SessionCountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionCount>
      _instance;
} _SessionCount_default_instance_;
class SessionExceptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionExcept>
      _instance;
} _SessionExcept_default_instance_;
class NetworkCountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkCount>
      _instance;
} _NetworkCount_default_instance_;
class ServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Service>
      _instance;
} _Service_default_instance_;
class LoggingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Logging>
      _instance;
} _Logging_default_instance_;
}  // namespace proto
}  // namespace net
}  // namespace eco
namespace protobuf_Monitor_2eproto {
void InitDefaultsSessionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::eco::net::proto::_Session_default_instance_;
    new (ptr) ::eco::net::proto::Session();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eco::net::proto::Session::InitAsDefaultInstance();
}

void InitDefaultsSession() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessionImpl);
}

void InitDefaultsSessionCountImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::eco::net::proto::_SessionCount_default_instance_;
    new (ptr) ::eco::net::proto::SessionCount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eco::net::proto::SessionCount::InitAsDefaultInstance();
}

void InitDefaultsSessionCount() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessionCountImpl);
}

void InitDefaultsSessionExceptImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::eco::net::proto::_SessionExcept_default_instance_;
    new (ptr) ::eco::net::proto::SessionExcept();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eco::net::proto::SessionExcept::InitAsDefaultInstance();
}

void InitDefaultsSessionExcept() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessionExceptImpl);
}

void InitDefaultsNetworkCountImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::eco::net::proto::_NetworkCount_default_instance_;
    new (ptr) ::eco::net::proto::NetworkCount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eco::net::proto::NetworkCount::InitAsDefaultInstance();
}

void InitDefaultsNetworkCount() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetworkCountImpl);
}

void InitDefaultsServiceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::eco::net::proto::_Service_default_instance_;
    new (ptr) ::eco::net::proto::Service();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eco::net::proto::Service::InitAsDefaultInstance();
}

void InitDefaultsService() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServiceImpl);
}

void InitDefaultsLoggingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::eco::net::proto::_Logging_default_instance_;
    new (ptr) ::eco::net::proto::Logging();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eco::net::proto::Logging::InitAsDefaultInstance();
}

void InitDefaultsLogging() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoggingImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Session, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Session, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Session, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Session, lang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Session, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Session, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Session, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Session, stamp_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Session, stamp_close_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionCount, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionCount, sess_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionCount, conn_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionCount, ddos_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionExcept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionExcept, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionExcept, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionExcept, except_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionExcept, except_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::SessionExcept, except_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::NetworkCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::NetworkCount, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::NetworkCount, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::NetworkCount, req_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::NetworkCount, rsp_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::NetworkCount, req_kbyte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::NetworkCount, rsp_kbyte_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Service, stamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::eco::net::proto::Logging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::eco::net::proto::Session)},
  { 14, -1, sizeof(::eco::net::proto::SessionCount)},
  { 23, -1, sizeof(::eco::net::proto::SessionExcept)},
  { 33, -1, sizeof(::eco::net::proto::NetworkCount)},
  { 44, -1, sizeof(::eco::net::proto::Service)},
  { 50, -1, sizeof(::eco::net::proto::Logging)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::eco::net::proto::_Session_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::eco::net::proto::_SessionCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::eco::net::proto::_SessionExcept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::eco::net::proto::_NetworkCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::eco::net::proto::_Service_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::eco::net::proto::_Logging_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Monitor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rMonitor.proto\022\reco.net.proto\"\222\001\n\007Sessi"
      "on\022\n\n\002id\030\001 \001(\004\022\r\n\005owner\030\002 \001(\r\022\014\n\004user\030\005 "
      "\001(\t\022\014\n\004lang\030\006 \001(\t\022\n\n\002ip\030\n \001(\t\022\014\n\004port\030\013 "
      "\001(\r\022\r\n\005state\030\017 \001(\r\022\022\n\nstamp_open\030\020 \001(\004\022\023"
      "\n\013stamp_close\030\021 \001(\004\"V\n\014SessionCount\022\r\n\005s"
      "tamp\030\001 \001(\004\022\021\n\tsess_size\030\002 \001(\r\022\021\n\tconn_si"
      "ze\030\003 \001(\r\022\021\n\tddos_size\030\004 \001(\r\"j\n\rSessionEx"
      "cept\022\n\n\002ip\030\001 \001(\t\022\r\n\005stamp\030\002 \001(\004\022\023\n\013excep"
      "t_mode\030\005 \001(\r\022\024\n\014except_total\030\006 \001(\r\022\023\n\013ex"
      "cept_size\030\007 \001(\r\"x\n\014NetworkCount\022\017\n\007sessi"
      "on\030\001 \001(\004\022\r\n\005stamp\030\002 \001(\004\022\020\n\010req_size\030\n \001("
      "\r\022\020\n\010rsp_size\030\013 \001(\r\022\021\n\treq_kbyte\030\024 \001(\004\022\021"
      "\n\trsp_kbyte\030\025 \001(\004\"\030\n\007Service\022\r\n\005stamp\030\001 "
      "\001(\004\"\t\n\007Loggingb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 542);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Monitor.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Monitor_2eproto
namespace eco {
namespace net {
namespace proto {

// ===================================================================

void Session::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kIdFieldNumber;
const int Session::kOwnerFieldNumber;
const int Session::kUserFieldNumber;
const int Session::kLangFieldNumber;
const int Session::kIpFieldNumber;
const int Session::kPortFieldNumber;
const int Session::kStateFieldNumber;
const int Session::kStampOpenFieldNumber;
const int Session::kStampCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Monitor_2eproto::InitDefaultsSession();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.net.proto.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lang().size() > 0) {
    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stamp_close_) -
    reinterpret_cast<char*>(&id_)) + sizeof(stamp_close_));
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.Session)
}

void Session::SharedCtor() {
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stamp_close_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stamp_close_));
  _cached_size_ = 0;
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:eco.net.proto.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Session& Session::default_instance() {
  ::protobuf_Monitor_2eproto::InitDefaultsSession();
  return *internal_default_instance();
}

Session* Session::New(::google::protobuf::Arena* arena) const {
  Session* n = new Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stamp_close_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stamp_close_));
  _internal_metadata_.Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.net.proto.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eco.net.proto.Session.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lang = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), static_cast<int>(this->lang().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eco.net.proto.Session.lang"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eco.net.proto.Session.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 stamp_open = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 stamp_close = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.net.proto.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.net.proto.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.net.proto.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // uint32 owner = 2;
  if (this->owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner(), output);
  }

  // string user = 5;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.Session.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user(), output);
  }

  // string lang = 6;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), static_cast<int>(this->lang().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.Session.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lang(), output);
  }

  // string ip = 10;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.Session.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ip(), output);
  }

  // uint32 port = 11;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->port(), output);
  }

  // uint32 state = 15;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->state(), output);
  }

  // uint64 stamp_open = 16;
  if (this->stamp_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->stamp_open(), output);
  }

  // uint64 stamp_close = 17;
  if (this->stamp_close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->stamp_close(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.net.proto.Session)
}

::google::protobuf::uint8* Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // uint32 owner = 2;
  if (this->owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner(), target);
  }

  // string user = 5;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.Session.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // string lang = 6;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), static_cast<int>(this->lang().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.Session.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lang(), target);
  }

  // string ip = 10;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.Session.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ip(), target);
  }

  // uint32 port = 11;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->port(), target);
  }

  // uint32 state = 15;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->state(), target);
  }

  // uint64 stamp_open = 16;
  if (this->stamp_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->stamp_open(), target);
  }

  // uint64 stamp_close = 17;
  if (this->stamp_close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->stamp_close(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.Session)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user = 5;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // string lang = 6;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // string ip = 10;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint32 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner());
  }

  // uint32 port = 11;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 state = 15;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // uint64 stamp_open = 16;
  if (this->stamp_open() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp_open());
  }

  // uint64 stamp_close = 17;
  if (this->stamp_close() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp_close());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.owner() != 0) {
    set_owner(from.owner());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.stamp_open() != 0) {
    set_stamp_open(from.stamp_open());
  }
  if (from.stamp_close() != 0) {
    set_stamp_close(from.stamp_close());
  }
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  using std::swap;
  user_.Swap(&other->user_);
  lang_.Swap(&other->lang_);
  ip_.Swap(&other->ip_);
  swap(id_, other->id_);
  swap(owner_, other->owner_);
  swap(port_, other->port_);
  swap(state_, other->state_);
  swap(stamp_open_, other->stamp_open_);
  swap(stamp_close_, other->stamp_close_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SessionCount::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionCount::kStampFieldNumber;
const int SessionCount::kSessSizeFieldNumber;
const int SessionCount::kConnSizeFieldNumber;
const int SessionCount::kDdosSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionCount::SessionCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Monitor_2eproto::InitDefaultsSessionCount();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.net.proto.SessionCount)
}
SessionCount::SessionCount(const SessionCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ddos_size_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(ddos_size_));
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.SessionCount)
}

void SessionCount::SharedCtor() {
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddos_size_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(ddos_size_));
  _cached_size_ = 0;
}

SessionCount::~SessionCount() {
  // @@protoc_insertion_point(destructor:eco.net.proto.SessionCount)
  SharedDtor();
}

void SessionCount::SharedDtor() {
}

void SessionCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionCount::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionCount& SessionCount::default_instance() {
  ::protobuf_Monitor_2eproto::InitDefaultsSessionCount();
  return *internal_default_instance();
}

SessionCount* SessionCount::New(::google::protobuf::Arena* arena) const {
  SessionCount* n = new SessionCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionCount::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.SessionCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddos_size_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(ddos_size_));
  _internal_metadata_.Clear();
}

bool SessionCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.net.proto.SessionCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sess_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sess_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 conn_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conn_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ddos_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddos_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.net.proto.SessionCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.net.proto.SessionCount)
  return false;
#undef DO_
}

void SessionCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.net.proto.SessionCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stamp(), output);
  }

  // uint32 sess_size = 2;
  if (this->sess_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sess_size(), output);
  }

  // uint32 conn_size = 3;
  if (this->conn_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->conn_size(), output);
  }

  // uint32 ddos_size = 4;
  if (this->ddos_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ddos_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.net.proto.SessionCount)
}

::google::protobuf::uint8* SessionCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.SessionCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stamp(), target);
  }

  // uint32 sess_size = 2;
  if (this->sess_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sess_size(), target);
  }

  // uint32 conn_size = 3;
  if (this->conn_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->conn_size(), target);
  }

  // uint32 ddos_size = 4;
  if (this->ddos_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ddos_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.SessionCount)
  return target;
}

size_t SessionCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.SessionCount)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  // uint32 sess_size = 2;
  if (this->sess_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sess_size());
  }

  // uint32 conn_size = 3;
  if (this->conn_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->conn_size());
  }

  // uint32 ddos_size = 4;
  if (this->ddos_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ddos_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.SessionCount)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionCount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.SessionCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.SessionCount)
    MergeFrom(*source);
  }
}

void SessionCount::MergeFrom(const SessionCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.SessionCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stamp() != 0) {
    set_stamp(from.stamp());
  }
  if (from.sess_size() != 0) {
    set_sess_size(from.sess_size());
  }
  if (from.conn_size() != 0) {
    set_conn_size(from.conn_size());
  }
  if (from.ddos_size() != 0) {
    set_ddos_size(from.ddos_size());
  }
}

void SessionCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.SessionCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionCount::CopyFrom(const SessionCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.SessionCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionCount::IsInitialized() const {
  return true;
}

void SessionCount::Swap(SessionCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionCount::InternalSwap(SessionCount* other) {
  using std::swap;
  swap(stamp_, other->stamp_);
  swap(sess_size_, other->sess_size_);
  swap(conn_size_, other->conn_size_);
  swap(ddos_size_, other->ddos_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionCount::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SessionExcept::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionExcept::kIpFieldNumber;
const int SessionExcept::kStampFieldNumber;
const int SessionExcept::kExceptModeFieldNumber;
const int SessionExcept::kExceptTotalFieldNumber;
const int SessionExcept::kExceptSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionExcept::SessionExcept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Monitor_2eproto::InitDefaultsSessionExcept();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.net.proto.SessionExcept)
}
SessionExcept::SessionExcept(const SessionExcept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&except_size_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(except_size_));
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.SessionExcept)
}

void SessionExcept::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&except_size_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(except_size_));
  _cached_size_ = 0;
}

SessionExcept::~SessionExcept() {
  // @@protoc_insertion_point(destructor:eco.net.proto.SessionExcept)
  SharedDtor();
}

void SessionExcept::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionExcept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionExcept::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionExcept& SessionExcept::default_instance() {
  ::protobuf_Monitor_2eproto::InitDefaultsSessionExcept();
  return *internal_default_instance();
}

SessionExcept* SessionExcept::New(::google::protobuf::Arena* arena) const {
  SessionExcept* n = new SessionExcept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionExcept::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.SessionExcept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&except_size_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(except_size_));
  _internal_metadata_.Clear();
}

bool SessionExcept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.net.proto.SessionExcept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eco.net.proto.SessionExcept.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 except_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &except_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 except_total = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &except_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 except_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &except_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.net.proto.SessionExcept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.net.proto.SessionExcept)
  return false;
#undef DO_
}

void SessionExcept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.net.proto.SessionExcept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.SessionExcept.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // uint64 stamp = 2;
  if (this->stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stamp(), output);
  }

  // uint32 except_mode = 5;
  if (this->except_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->except_mode(), output);
  }

  // uint32 except_total = 6;
  if (this->except_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->except_total(), output);
  }

  // uint32 except_size = 7;
  if (this->except_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->except_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.net.proto.SessionExcept)
}

::google::protobuf::uint8* SessionExcept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.SessionExcept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.SessionExcept.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // uint64 stamp = 2;
  if (this->stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stamp(), target);
  }

  // uint32 except_mode = 5;
  if (this->except_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->except_mode(), target);
  }

  // uint32 except_total = 6;
  if (this->except_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->except_total(), target);
  }

  // uint32 except_size = 7;
  if (this->except_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->except_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.SessionExcept)
  return target;
}

size_t SessionExcept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.SessionExcept)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // uint64 stamp = 2;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  // uint32 except_mode = 5;
  if (this->except_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->except_mode());
  }

  // uint32 except_total = 6;
  if (this->except_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->except_total());
  }

  // uint32 except_size = 7;
  if (this->except_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->except_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionExcept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.SessionExcept)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionExcept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionExcept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.SessionExcept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.SessionExcept)
    MergeFrom(*source);
  }
}

void SessionExcept::MergeFrom(const SessionExcept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.SessionExcept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.stamp() != 0) {
    set_stamp(from.stamp());
  }
  if (from.except_mode() != 0) {
    set_except_mode(from.except_mode());
  }
  if (from.except_total() != 0) {
    set_except_total(from.except_total());
  }
  if (from.except_size() != 0) {
    set_except_size(from.except_size());
  }
}

void SessionExcept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.SessionExcept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionExcept::CopyFrom(const SessionExcept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.SessionExcept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionExcept::IsInitialized() const {
  return true;
}

void SessionExcept::Swap(SessionExcept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionExcept::InternalSwap(SessionExcept* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  swap(stamp_, other->stamp_);
  swap(except_mode_, other->except_mode_);
  swap(except_total_, other->except_total_);
  swap(except_size_, other->except_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionExcept::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetworkCount::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCount::kSessionFieldNumber;
const int NetworkCount::kStampFieldNumber;
const int NetworkCount::kReqSizeFieldNumber;
const int NetworkCount::kRspSizeFieldNumber;
const int NetworkCount::kReqKbyteFieldNumber;
const int NetworkCount::kRspKbyteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCount::NetworkCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Monitor_2eproto::InitDefaultsNetworkCount();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.net.proto.NetworkCount)
}
NetworkCount::NetworkCount(const NetworkCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&rsp_kbyte_) -
    reinterpret_cast<char*>(&session_)) + sizeof(rsp_kbyte_));
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.NetworkCount)
}

void NetworkCount::SharedCtor() {
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rsp_kbyte_) -
      reinterpret_cast<char*>(&session_)) + sizeof(rsp_kbyte_));
  _cached_size_ = 0;
}

NetworkCount::~NetworkCount() {
  // @@protoc_insertion_point(destructor:eco.net.proto.NetworkCount)
  SharedDtor();
}

void NetworkCount::SharedDtor() {
}

void NetworkCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkCount::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkCount& NetworkCount::default_instance() {
  ::protobuf_Monitor_2eproto::InitDefaultsNetworkCount();
  return *internal_default_instance();
}

NetworkCount* NetworkCount::New(::google::protobuf::Arena* arena) const {
  NetworkCount* n = new NetworkCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCount::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.NetworkCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rsp_kbyte_) -
      reinterpret_cast<char*>(&session_)) + sizeof(rsp_kbyte_));
  _internal_metadata_.Clear();
}

bool NetworkCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.net.proto.NetworkCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 req_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rsp_size = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rsp_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 req_kbyte = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_kbyte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 rsp_kbyte = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rsp_kbyte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.net.proto.NetworkCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.net.proto.NetworkCount)
  return false;
#undef DO_
}

void NetworkCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.net.proto.NetworkCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session = 1;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->session(), output);
  }

  // uint64 stamp = 2;
  if (this->stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stamp(), output);
  }

  // uint32 req_size = 10;
  if (this->req_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->req_size(), output);
  }

  // uint32 rsp_size = 11;
  if (this->rsp_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->rsp_size(), output);
  }

  // uint64 req_kbyte = 20;
  if (this->req_kbyte() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->req_kbyte(), output);
  }

  // uint64 rsp_kbyte = 21;
  if (this->rsp_kbyte() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->rsp_kbyte(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.net.proto.NetworkCount)
}

::google::protobuf::uint8* NetworkCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.NetworkCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session = 1;
  if (this->session() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->session(), target);
  }

  // uint64 stamp = 2;
  if (this->stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stamp(), target);
  }

  // uint32 req_size = 10;
  if (this->req_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->req_size(), target);
  }

  // uint32 rsp_size = 11;
  if (this->rsp_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->rsp_size(), target);
  }

  // uint64 req_kbyte = 20;
  if (this->req_kbyte() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->req_kbyte(), target);
  }

  // uint64 rsp_kbyte = 21;
  if (this->rsp_kbyte() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->rsp_kbyte(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.NetworkCount)
  return target;
}

size_t NetworkCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.NetworkCount)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 session = 1;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  // uint64 stamp = 2;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  // uint32 req_size = 10;
  if (this->req_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->req_size());
  }

  // uint32 rsp_size = 11;
  if (this->rsp_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rsp_size());
  }

  // uint64 req_kbyte = 20;
  if (this->req_kbyte() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_kbyte());
  }

  // uint64 rsp_kbyte = 21;
  if (this->rsp_kbyte() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rsp_kbyte());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.NetworkCount)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkCount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.NetworkCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.NetworkCount)
    MergeFrom(*source);
  }
}

void NetworkCount::MergeFrom(const NetworkCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.NetworkCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session() != 0) {
    set_session(from.session());
  }
  if (from.stamp() != 0) {
    set_stamp(from.stamp());
  }
  if (from.req_size() != 0) {
    set_req_size(from.req_size());
  }
  if (from.rsp_size() != 0) {
    set_rsp_size(from.rsp_size());
  }
  if (from.req_kbyte() != 0) {
    set_req_kbyte(from.req_kbyte());
  }
  if (from.rsp_kbyte() != 0) {
    set_rsp_kbyte(from.rsp_kbyte());
  }
}

void NetworkCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.NetworkCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkCount::CopyFrom(const NetworkCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.NetworkCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCount::IsInitialized() const {
  return true;
}

void NetworkCount::Swap(NetworkCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCount::InternalSwap(NetworkCount* other) {
  using std::swap;
  swap(session_, other->session_);
  swap(stamp_, other->stamp_);
  swap(req_size_, other->req_size_);
  swap(rsp_size_, other->rsp_size_);
  swap(req_kbyte_, other->req_kbyte_);
  swap(rsp_kbyte_, other->rsp_kbyte_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkCount::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Service::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Service::kStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Service::Service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Monitor_2eproto::InitDefaultsService();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.net.proto.Service)
}
Service::Service(const Service& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stamp_ = from.stamp_;
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.Service)
}

void Service::SharedCtor() {
  stamp_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:eco.net.proto.Service)
  SharedDtor();
}

void Service::SharedDtor() {
}

void Service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Service& Service::default_instance() {
  ::protobuf_Monitor_2eproto::InitDefaultsService();
  return *internal_default_instance();
}

Service* Service::New(::google::protobuf::Arena* arena) const {
  Service* n = new Service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Service::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.Service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.net.proto.Service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.net.proto.Service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.net.proto.Service)
  return false;
#undef DO_
}

void Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.net.proto.Service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.net.proto.Service)
}

::google::protobuf::uint8* Service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.Service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.Service)
  return target;
}

size_t Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.Service)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.Service)
  GOOGLE_DCHECK_NE(&from, this);
  const Service* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.Service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.Service)
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.Service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stamp() != 0) {
    set_stamp(from.stamp());
  }
}

void Service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {
  return true;
}

void Service::Swap(Service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Service::InternalSwap(Service* other) {
  using std::swap;
  swap(stamp_, other->stamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Service::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Logging::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logging::Logging()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Monitor_2eproto::InitDefaultsLogging();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.net.proto.Logging)
}
Logging::Logging(const Logging& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.Logging)
}

void Logging::SharedCtor() {
  _cached_size_ = 0;
}

Logging::~Logging() {
  // @@protoc_insertion_point(destructor:eco.net.proto.Logging)
  SharedDtor();
}

void Logging::SharedDtor() {
}

void Logging::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logging::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Logging& Logging::default_instance() {
  ::protobuf_Monitor_2eproto::InitDefaultsLogging();
  return *internal_default_instance();
}

Logging* Logging::New(::google::protobuf::Arena* arena) const {
  Logging* n = new Logging;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Logging::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.Logging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Logging::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.net.proto.Logging)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:eco.net.proto.Logging)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.net.proto.Logging)
  return false;
#undef DO_
}

void Logging::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.net.proto.Logging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.net.proto.Logging)
}

::google::protobuf::uint8* Logging::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.Logging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.Logging)
  return target;
}

size_t Logging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.Logging)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logging::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.Logging)
  GOOGLE_DCHECK_NE(&from, this);
  const Logging* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logging>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.Logging)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.Logging)
    MergeFrom(*source);
  }
}

void Logging::MergeFrom(const Logging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.Logging)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Logging::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.Logging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logging::CopyFrom(const Logging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.Logging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logging::IsInitialized() const {
  return true;
}

void Logging::Swap(Logging* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logging::InternalSwap(Logging* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logging::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace net
}  // namespace eco

// @@protoc_insertion_point(global_scope)
