// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Object.proto

#ifndef PROTOBUF_Object_2eproto__INCLUDED
#define PROTOBUF_Object_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Object_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsErrorImpl();
void InitDefaultsError();
void InitDefaultsWordImpl();
void InitDefaultsWord();
void InitDefaultsLanguageImpl();
void InitDefaultsLanguage();
void InitDefaultsLocaleImpl();
void InitDefaultsLocale();
void InitDefaultsGetLangReqImpl();
void InitDefaultsGetLangReq();
void InitDefaultsGetLicenseRspImpl();
void InitDefaultsGetLicenseRsp();
void InitDefaultsFunctionImpl();
void InitDefaultsFunction();
void InitDefaultsRoleImpl();
void InitDefaultsRole();
void InitDefaultsLoggingImpl();
void InitDefaultsLogging();
void InitDefaultsSubscribeImpl();
void InitDefaultsSubscribe();
void InitDefaultsRemoveImpl();
void InitDefaultsRemove();
void InitDefaultsPropertyImpl();
void InitDefaultsProperty();
void InitDefaultsDatatypeImpl();
void InitDefaultsDatatype();
inline void InitDefaults() {
  InitDefaultsError();
  InitDefaultsWord();
  InitDefaultsLanguage();
  InitDefaultsLocale();
  InitDefaultsGetLangReq();
  InitDefaultsGetLicenseRsp();
  InitDefaultsFunction();
  InitDefaultsRole();
  InitDefaultsLogging();
  InitDefaultsSubscribe();
  InitDefaultsRemove();
  InitDefaultsProperty();
  InitDefaultsDatatype();
}
}  // namespace protobuf_Object_2eproto
namespace eco {
namespace proto {
class Datatype;
class DatatypeDefaultTypeInternal;
extern DatatypeDefaultTypeInternal _Datatype_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Function;
class FunctionDefaultTypeInternal;
extern FunctionDefaultTypeInternal _Function_default_instance_;
class GetLangReq;
class GetLangReqDefaultTypeInternal;
extern GetLangReqDefaultTypeInternal _GetLangReq_default_instance_;
class GetLicenseRsp;
class GetLicenseRspDefaultTypeInternal;
extern GetLicenseRspDefaultTypeInternal _GetLicenseRsp_default_instance_;
class Language;
class LanguageDefaultTypeInternal;
extern LanguageDefaultTypeInternal _Language_default_instance_;
class Locale;
class LocaleDefaultTypeInternal;
extern LocaleDefaultTypeInternal _Locale_default_instance_;
class Logging;
class LoggingDefaultTypeInternal;
extern LoggingDefaultTypeInternal _Logging_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class Remove;
class RemoveDefaultTypeInternal;
extern RemoveDefaultTypeInternal _Remove_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class Subscribe;
class SubscribeDefaultTypeInternal;
extern SubscribeDefaultTypeInternal _Subscribe_default_instance_;
class Word;
class WordDefaultTypeInternal;
extern WordDefaultTypeInternal _Word_default_instance_;
}  // namespace proto
}  // namespace eco
namespace eco {
namespace proto {

// ===================================================================

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const PROTOBUF_FINAL { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eco.proto.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsErrorImpl();
};
// -------------------------------------------------------------------

class Word : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Word) */ {
 public:
  Word();
  virtual ~Word();

  Word(const Word& from);

  inline Word& operator=(const Word& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Word(Word&& from) noexcept
    : Word() {
    *this = ::std::move(from);
  }

  inline Word& operator=(Word&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Word& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Word* internal_default_instance() {
    return reinterpret_cast<const Word*>(
               &_Word_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Word* other);
  friend void swap(Word& a, Word& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Word* New() const PROTOBUF_FINAL { return New(NULL); }

  Word* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Word& from);
  void MergeFrom(const Word& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Word* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:eco.proto.Word)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsWordImpl();
};
// -------------------------------------------------------------------

class Language : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Language) */ {
 public:
  Language();
  virtual ~Language();

  Language(const Language& from);

  inline Language& operator=(const Language& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Language(Language&& from) noexcept
    : Language() {
    *this = ::std::move(from);
  }

  inline Language& operator=(Language&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Language& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Language* internal_default_instance() {
    return reinterpret_cast<const Language*>(
               &_Language_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Language* other);
  friend void swap(Language& a, Language& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Language* New() const PROTOBUF_FINAL { return New(NULL); }

  Language* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Language& from);
  void MergeFrom(const Language& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Language* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eco.proto.Word word = 8;
  int word_size() const;
  void clear_word();
  static const int kWordFieldNumber = 8;
  const ::eco::proto::Word& word(int index) const;
  ::eco::proto::Word* mutable_word(int index);
  ::eco::proto::Word* add_word();
  ::google::protobuf::RepeatedPtrField< ::eco::proto::Word >*
      mutable_word();
  const ::google::protobuf::RepeatedPtrField< ::eco::proto::Word >&
      word() const;

  // repeated .eco.proto.Error error = 9;
  int error_size() const;
  void clear_error();
  static const int kErrorFieldNumber = 9;
  const ::eco::proto::Error& error(int index) const;
  ::eco::proto::Error* mutable_error(int index);
  ::eco::proto::Error* add_error();
  ::google::protobuf::RepeatedPtrField< ::eco::proto::Error >*
      mutable_error();
  const ::google::protobuf::RepeatedPtrField< ::eco::proto::Error >&
      error() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:eco.proto.Language)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eco::proto::Word > word_;
  ::google::protobuf::RepeatedPtrField< ::eco::proto::Error > error_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsLanguageImpl();
};
// -------------------------------------------------------------------

class Locale : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Locale) */ {
 public:
  Locale();
  virtual ~Locale();

  Locale(const Locale& from);

  inline Locale& operator=(const Locale& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Locale(Locale&& from) noexcept
    : Locale() {
    *this = ::std::move(from);
  }

  inline Locale& operator=(Locale&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Locale& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Locale* internal_default_instance() {
    return reinterpret_cast<const Locale*>(
               &_Locale_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Locale* other);
  friend void swap(Locale& a, Locale& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Locale* New() const PROTOBUF_FINAL { return New(NULL); }

  Locale* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Locale& from);
  void MergeFrom(const Locale& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Locale* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eco.proto.Language lang = 9;
  int lang_size() const;
  void clear_lang();
  static const int kLangFieldNumber = 9;
  const ::eco::proto::Language& lang(int index) const;
  ::eco::proto::Language* mutable_lang(int index);
  ::eco::proto::Language* add_lang();
  ::google::protobuf::RepeatedPtrField< ::eco::proto::Language >*
      mutable_lang();
  const ::google::protobuf::RepeatedPtrField< ::eco::proto::Language >&
      lang() const;

  // string default = 1;
  void clear_default_();
  static const int kDefaultFieldNumber = 1;
  const ::std::string& default_() const;
  void set_default_(const ::std::string& value);
  #if LANG_CXX11
  void set_default_(::std::string&& value);
  #endif
  void set_default_(const char* value);
  void set_default_(const char* value, size_t size);
  ::std::string* mutable_default_();
  ::std::string* release_default_();
  void set_allocated_default_(::std::string* default_);

  // @@protoc_insertion_point(class_scope:eco.proto.Locale)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eco::proto::Language > lang_;
  ::google::protobuf::internal::ArenaStringPtr default__;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsLocaleImpl();
};
// -------------------------------------------------------------------

class GetLangReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.GetLangReq) */ {
 public:
  GetLangReq();
  virtual ~GetLangReq();

  GetLangReq(const GetLangReq& from);

  inline GetLangReq& operator=(const GetLangReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLangReq(GetLangReq&& from) noexcept
    : GetLangReq() {
    *this = ::std::move(from);
  }

  inline GetLangReq& operator=(GetLangReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLangReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLangReq* internal_default_instance() {
    return reinterpret_cast<const GetLangReq*>(
               &_GetLangReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GetLangReq* other);
  friend void swap(GetLangReq& a, GetLangReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLangReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLangReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLangReq& from);
  void MergeFrom(const GetLangReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLangReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string module = 1;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  const ::std::string& module() const;
  void set_module(const ::std::string& value);
  #if LANG_CXX11
  void set_module(::std::string&& value);
  #endif
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  ::std::string* mutable_module();
  ::std::string* release_module();
  void set_allocated_module(::std::string* module);

  // string lang = 2;
  void clear_lang();
  static const int kLangFieldNumber = 2;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  #if LANG_CXX11
  void set_lang(::std::string&& value);
  #endif
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // @@protoc_insertion_point(class_scope:eco.proto.GetLangReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr module_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsGetLangReqImpl();
};
// -------------------------------------------------------------------

class GetLicenseRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.GetLicenseRsp) */ {
 public:
  GetLicenseRsp();
  virtual ~GetLicenseRsp();

  GetLicenseRsp(const GetLicenseRsp& from);

  inline GetLicenseRsp& operator=(const GetLicenseRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLicenseRsp(GetLicenseRsp&& from) noexcept
    : GetLicenseRsp() {
    *this = ::std::move(from);
  }

  inline GetLicenseRsp& operator=(GetLicenseRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLicenseRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLicenseRsp* internal_default_instance() {
    return reinterpret_cast<const GetLicenseRsp*>(
               &_GetLicenseRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GetLicenseRsp* other);
  friend void swap(GetLicenseRsp& a, GetLicenseRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLicenseRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLicenseRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLicenseRsp& from);
  void MergeFrom(const GetLicenseRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLicenseRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string module = 1;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  const ::std::string& module() const;
  void set_module(const ::std::string& value);
  #if LANG_CXX11
  void set_module(::std::string&& value);
  #endif
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  ::std::string* mutable_module();
  ::std::string* release_module();
  void set_allocated_module(::std::string* module);

  // string lang = 2;
  void clear_lang();
  static const int kLangFieldNumber = 2;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  #if LANG_CXX11
  void set_lang(::std::string&& value);
  #endif
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // string license = 4;
  void clear_license();
  static const int kLicenseFieldNumber = 4;
  const ::std::string& license() const;
  void set_license(const ::std::string& value);
  #if LANG_CXX11
  void set_license(::std::string&& value);
  #endif
  void set_license(const char* value);
  void set_license(const char* value, size_t size);
  ::std::string* mutable_license();
  ::std::string* release_license();
  void set_allocated_license(::std::string* license);

  // string version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:eco.proto.GetLicenseRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr module_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr license_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsGetLicenseRspImpl();
};
// -------------------------------------------------------------------

class Function : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Function) */ {
 public:
  Function();
  virtual ~Function();

  Function(const Function& from);

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Function(Function&& from) noexcept
    : Function() {
    *this = ::std::move(from);
  }

  inline Function& operator=(Function&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Function& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Function* internal_default_instance() {
    return reinterpret_cast<const Function*>(
               &_Function_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Function* other);
  friend void swap(Function& a, Function& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Function* New() const PROTOBUF_FINAL { return New(NULL); }

  Function* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Function& from);
  void MergeFrom(const Function& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Function* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string detail = 5;
  void clear_detail();
  static const int kDetailFieldNumber = 5;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  #if LANG_CXX11
  void set_detail(::std::string&& value);
  #endif
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 parent = 2;
  void clear_parent();
  static const int kParentFieldNumber = 2;
  ::google::protobuf::uint64 parent() const;
  void set_parent(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eco.proto.Function)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 parent_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsFunctionImpl();
};
// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Role* other);
  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const PROTOBUF_FINAL { return New(NULL); }

  Role* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Role* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eco.proto.Function func = 10;
  int func_size() const;
  void clear_func();
  static const int kFuncFieldNumber = 10;
  const ::eco::proto::Function& func(int index) const;
  ::eco::proto::Function* mutable_func(int index);
  ::eco::proto::Function* add_func();
  ::google::protobuf::RepeatedPtrField< ::eco::proto::Function >*
      mutable_func();
  const ::google::protobuf::RepeatedPtrField< ::eco::proto::Function >&
      func() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eco.proto.Role)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eco::proto::Function > func_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsRoleImpl();
};
// -------------------------------------------------------------------

class Logging : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Logging) */ {
 public:
  Logging();
  virtual ~Logging();

  Logging(const Logging& from);

  inline Logging& operator=(const Logging& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Logging(Logging&& from) noexcept
    : Logging() {
    *this = ::std::move(from);
  }

  inline Logging& operator=(Logging&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logging& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Logging* internal_default_instance() {
    return reinterpret_cast<const Logging*>(
               &_Logging_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Logging* other);
  friend void swap(Logging& a, Logging& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Logging* New() const PROTOBUF_FINAL { return New(NULL); }

  Logging* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Logging& from);
  void MergeFrom(const Logging& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Logging* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 2;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string mac = 5;
  void clear_mac();
  static const int kMacFieldNumber = 5;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string name = 10;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 11;
  void clear_value();
  static const int kValueFieldNumber = 11;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string detail = 12;
  void clear_detail();
  static const int kDetailFieldNumber = 12;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  #if LANG_CXX11
  void set_detail(::std::string&& value);
  #endif
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 object = 9;
  void clear_object();
  static const int kObjectFieldNumber = 9;
  ::google::protobuf::uint64 object() const;
  void set_object(::google::protobuf::uint64 value);

  // uint32 action = 8;
  void clear_action();
  static const int kActionFieldNumber = 8;
  ::google::protobuf::uint32 action() const;
  void set_action(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eco.proto.Logging)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 object_;
  ::google::protobuf::uint32 action_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsLoggingImpl();
};
// -------------------------------------------------------------------

class Subscribe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Subscribe) */ {
 public:
  Subscribe();
  virtual ~Subscribe();

  Subscribe(const Subscribe& from);

  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Subscribe(Subscribe&& from) noexcept
    : Subscribe() {
    *this = ::std::move(from);
  }

  inline Subscribe& operator=(Subscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscribe* internal_default_instance() {
    return reinterpret_cast<const Subscribe*>(
               &_Subscribe_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Subscribe* other);
  friend void swap(Subscribe& a, Subscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Subscribe* New() const PROTOBUF_FINAL { return New(NULL); }

  Subscribe* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Subscribe& from);
  void MergeFrom(const Subscribe& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Subscribe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string topic = 4;
  void clear_topic();
  static const int kTopicFieldNumber = 4;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // uint64 value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // uint32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eco.proto.Subscribe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsSubscribeImpl();
};
// -------------------------------------------------------------------

class Remove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Remove) */ {
 public:
  Remove();
  virtual ~Remove();

  Remove(const Remove& from);

  inline Remove& operator=(const Remove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Remove(Remove&& from) noexcept
    : Remove() {
    *this = ::std::move(from);
  }

  inline Remove& operator=(Remove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Remove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Remove* internal_default_instance() {
    return reinterpret_cast<const Remove*>(
               &_Remove_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Remove* other);
  friend void swap(Remove& a, Remove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Remove* New() const PROTOBUF_FINAL { return New(NULL); }

  Remove* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Remove& from);
  void MergeFrom(const Remove& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Remove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string entity = 5;
  void clear_entity();
  static const int kEntityFieldNumber = 5;
  const ::std::string& entity() const;
  void set_entity(const ::std::string& value);
  #if LANG_CXX11
  void set_entity(::std::string&& value);
  #endif
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  ::std::string* mutable_entity();
  ::std::string* release_entity();
  void set_allocated_entity(::std::string* entity);

  // uint64 object = 2;
  void clear_object();
  static const int kObjectFieldNumber = 2;
  ::google::protobuf::uint64 object() const;
  void set_object(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eco.proto.Remove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr entity_;
  ::google::protobuf::uint64 object_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsRemoveImpl();
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Property) */ {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Property* other);
  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const PROTOBUF_FINAL { return New(NULL); }

  Property* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string entity = 5;
  void clear_entity();
  static const int kEntityFieldNumber = 5;
  const ::std::string& entity() const;
  void set_entity(const ::std::string& value);
  #if LANG_CXX11
  void set_entity(::std::string&& value);
  #endif
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  ::std::string* mutable_entity();
  ::std::string* release_entity();
  void set_allocated_entity(::std::string* entity);

  // uint64 object = 2;
  void clear_object();
  static const int kObjectFieldNumber = 2;
  ::google::protobuf::uint64 object() const;
  void set_object(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eco.proto.Property)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr entity_;
  ::google::protobuf::uint64 object_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsPropertyImpl();
};
// -------------------------------------------------------------------

class Datatype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eco.proto.Datatype) */ {
 public:
  Datatype();
  virtual ~Datatype();

  Datatype(const Datatype& from);

  inline Datatype& operator=(const Datatype& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Datatype(Datatype&& from) noexcept
    : Datatype() {
    *this = ::std::move(from);
  }

  inline Datatype& operator=(Datatype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Datatype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Datatype* internal_default_instance() {
    return reinterpret_cast<const Datatype*>(
               &_Datatype_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Datatype* other);
  friend void swap(Datatype& a, Datatype& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Datatype* New() const PROTOBUF_FINAL { return New(NULL); }

  Datatype* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Datatype& from);
  void MergeFrom(const Datatype& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Datatype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 12;
  void clear_value();
  static const int kValueFieldNumber = 12;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string range = 13;
  void clear_range();
  static const int kRangeFieldNumber = 13;
  const ::std::string& range() const;
  void set_range(const ::std::string& value);
  #if LANG_CXX11
  void set_range(::std::string&& value);
  #endif
  void set_range(const char* value);
  void set_range(const char* value, size_t size);
  ::std::string* mutable_range();
  ::std::string* release_range();
  void set_allocated_range(::std::string* range);

  // string detail = 14;
  void clear_detail();
  static const int kDetailFieldNumber = 14;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  #if LANG_CXX11
  void set_detail(::std::string&& value);
  #endif
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  // uint32 type = 11;
  void clear_type();
  static const int kTypeFieldNumber = 11;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eco.proto.Datatype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr range_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Object_2eproto::TableStruct;
  friend void ::protobuf_Object_2eproto::InitDefaultsDatatypeImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Error

// int32 id = 1;
inline void Error::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Error::id() const {
  // @@protoc_insertion_point(field_get:eco.proto.Error.id)
  return id_;
}
inline void Error::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Error.id)
}

// string path = 2;
inline void Error::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::path() const {
  // @@protoc_insertion_point(field_get:eco.proto.Error.path)
  return path_.GetNoArena();
}
inline void Error::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Error.path)
}
#if LANG_CXX11
inline void Error::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Error.path)
}
#endif
inline void Error::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Error.path)
}
inline void Error::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Error.path)
}
inline ::std::string* Error::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Error.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_path() {
  // @@protoc_insertion_point(field_release:eco.proto.Error.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Error.path)
}

// string message = 3;
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:eco.proto.Error.message)
  return message_.GetNoArena();
}
inline void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Error.message)
}
#if LANG_CXX11
inline void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Error.message)
}
#endif
inline void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Error.message)
}
inline ::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:eco.proto.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Error.message)
}

// -------------------------------------------------------------------

// Word

// string path = 1;
inline void Word::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Word::path() const {
  // @@protoc_insertion_point(field_get:eco.proto.Word.path)
  return path_.GetNoArena();
}
inline void Word::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Word.path)
}
#if LANG_CXX11
inline void Word::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Word.path)
}
#endif
inline void Word::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Word.path)
}
inline void Word::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Word.path)
}
inline ::std::string* Word::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Word.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Word::release_path() {
  // @@protoc_insertion_point(field_release:eco.proto.Word.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Word::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Word.path)
}

// string value = 2;
inline void Word::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Word::value() const {
  // @@protoc_insertion_point(field_get:eco.proto.Word.value)
  return value_.GetNoArena();
}
inline void Word::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Word.value)
}
#if LANG_CXX11
inline void Word::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Word.value)
}
#endif
inline void Word::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Word.value)
}
inline void Word::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Word.value)
}
inline ::std::string* Word::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Word.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Word::release_value() {
  // @@protoc_insertion_point(field_release:eco.proto.Word.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Word::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Word.value)
}

// -------------------------------------------------------------------

// Language

// string name = 1;
inline void Language::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Language::name() const {
  // @@protoc_insertion_point(field_get:eco.proto.Language.name)
  return name_.GetNoArena();
}
inline void Language::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Language.name)
}
#if LANG_CXX11
inline void Language::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Language.name)
}
#endif
inline void Language::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Language.name)
}
inline void Language::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Language.name)
}
inline ::std::string* Language::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Language.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Language::release_name() {
  // @@protoc_insertion_point(field_release:eco.proto.Language.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Language::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Language.name)
}

// string version = 2;
inline void Language::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Language::version() const {
  // @@protoc_insertion_point(field_get:eco.proto.Language.version)
  return version_.GetNoArena();
}
inline void Language::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Language.version)
}
#if LANG_CXX11
inline void Language::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Language.version)
}
#endif
inline void Language::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Language.version)
}
inline void Language::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Language.version)
}
inline ::std::string* Language::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Language.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Language::release_version() {
  // @@protoc_insertion_point(field_release:eco.proto.Language.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Language::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Language.version)
}

// string path = 3;
inline void Language::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Language::path() const {
  // @@protoc_insertion_point(field_get:eco.proto.Language.path)
  return path_.GetNoArena();
}
inline void Language::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Language.path)
}
#if LANG_CXX11
inline void Language::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Language.path)
}
#endif
inline void Language::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Language.path)
}
inline void Language::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Language.path)
}
inline ::std::string* Language::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Language.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Language::release_path() {
  // @@protoc_insertion_point(field_release:eco.proto.Language.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Language::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Language.path)
}

// repeated .eco.proto.Word word = 8;
inline int Language::word_size() const {
  return word_.size();
}
inline void Language::clear_word() {
  word_.Clear();
}
inline const ::eco::proto::Word& Language::word(int index) const {
  // @@protoc_insertion_point(field_get:eco.proto.Language.word)
  return word_.Get(index);
}
inline ::eco::proto::Word* Language::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:eco.proto.Language.word)
  return word_.Mutable(index);
}
inline ::eco::proto::Word* Language::add_word() {
  // @@protoc_insertion_point(field_add:eco.proto.Language.word)
  return word_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eco::proto::Word >*
Language::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:eco.proto.Language.word)
  return &word_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eco::proto::Word >&
Language::word() const {
  // @@protoc_insertion_point(field_list:eco.proto.Language.word)
  return word_;
}

// repeated .eco.proto.Error error = 9;
inline int Language::error_size() const {
  return error_.size();
}
inline void Language::clear_error() {
  error_.Clear();
}
inline const ::eco::proto::Error& Language::error(int index) const {
  // @@protoc_insertion_point(field_get:eco.proto.Language.error)
  return error_.Get(index);
}
inline ::eco::proto::Error* Language::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:eco.proto.Language.error)
  return error_.Mutable(index);
}
inline ::eco::proto::Error* Language::add_error() {
  // @@protoc_insertion_point(field_add:eco.proto.Language.error)
  return error_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eco::proto::Error >*
Language::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:eco.proto.Language.error)
  return &error_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eco::proto::Error >&
Language::error() const {
  // @@protoc_insertion_point(field_list:eco.proto.Language.error)
  return error_;
}

// -------------------------------------------------------------------

// Locale

// string default = 1;
inline void Locale::clear_default_() {
  default__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Locale::default_() const {
  // @@protoc_insertion_point(field_get:eco.proto.Locale.default)
  return default__.GetNoArena();
}
inline void Locale::set_default_(const ::std::string& value) {
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Locale.default)
}
#if LANG_CXX11
inline void Locale::set_default_(::std::string&& value) {
  
  default__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Locale.default)
}
#endif
inline void Locale::set_default_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Locale.default)
}
inline void Locale::set_default_(const char* value, size_t size) {
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Locale.default)
}
inline ::std::string* Locale::mutable_default_() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Locale.default)
  return default__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Locale::release_default_() {
  // @@protoc_insertion_point(field_release:eco.proto.Locale.default)
  
  return default__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locale::set_allocated_default_(::std::string* default_) {
  if (default_ != NULL) {
    
  } else {
    
  }
  default__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Locale.default)
}

// repeated .eco.proto.Language lang = 9;
inline int Locale::lang_size() const {
  return lang_.size();
}
inline void Locale::clear_lang() {
  lang_.Clear();
}
inline const ::eco::proto::Language& Locale::lang(int index) const {
  // @@protoc_insertion_point(field_get:eco.proto.Locale.lang)
  return lang_.Get(index);
}
inline ::eco::proto::Language* Locale::mutable_lang(int index) {
  // @@protoc_insertion_point(field_mutable:eco.proto.Locale.lang)
  return lang_.Mutable(index);
}
inline ::eco::proto::Language* Locale::add_lang() {
  // @@protoc_insertion_point(field_add:eco.proto.Locale.lang)
  return lang_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eco::proto::Language >*
Locale::mutable_lang() {
  // @@protoc_insertion_point(field_mutable_list:eco.proto.Locale.lang)
  return &lang_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eco::proto::Language >&
Locale::lang() const {
  // @@protoc_insertion_point(field_list:eco.proto.Locale.lang)
  return lang_;
}

// -------------------------------------------------------------------

// GetLangReq

// string module = 1;
inline void GetLangReq::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLangReq::module() const {
  // @@protoc_insertion_point(field_get:eco.proto.GetLangReq.module)
  return module_.GetNoArena();
}
inline void GetLangReq::set_module(const ::std::string& value) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.GetLangReq.module)
}
#if LANG_CXX11
inline void GetLangReq::set_module(::std::string&& value) {
  
  module_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.GetLangReq.module)
}
#endif
inline void GetLangReq::set_module(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.GetLangReq.module)
}
inline void GetLangReq::set_module(const char* value, size_t size) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.GetLangReq.module)
}
inline ::std::string* GetLangReq::mutable_module() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.GetLangReq.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLangReq::release_module() {
  // @@protoc_insertion_point(field_release:eco.proto.GetLangReq.module)
  
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLangReq::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    
  } else {
    
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.GetLangReq.module)
}

// string lang = 2;
inline void GetLangReq::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLangReq::lang() const {
  // @@protoc_insertion_point(field_get:eco.proto.GetLangReq.lang)
  return lang_.GetNoArena();
}
inline void GetLangReq::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.GetLangReq.lang)
}
#if LANG_CXX11
inline void GetLangReq::set_lang(::std::string&& value) {
  
  lang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.GetLangReq.lang)
}
#endif
inline void GetLangReq::set_lang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.GetLangReq.lang)
}
inline void GetLangReq::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.GetLangReq.lang)
}
inline ::std::string* GetLangReq::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.GetLangReq.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLangReq::release_lang() {
  // @@protoc_insertion_point(field_release:eco.proto.GetLangReq.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLangReq::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.GetLangReq.lang)
}

// -------------------------------------------------------------------

// GetLicenseRsp

// string module = 1;
inline void GetLicenseRsp::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLicenseRsp::module() const {
  // @@protoc_insertion_point(field_get:eco.proto.GetLicenseRsp.module)
  return module_.GetNoArena();
}
inline void GetLicenseRsp::set_module(const ::std::string& value) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.GetLicenseRsp.module)
}
#if LANG_CXX11
inline void GetLicenseRsp::set_module(::std::string&& value) {
  
  module_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.GetLicenseRsp.module)
}
#endif
inline void GetLicenseRsp::set_module(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.GetLicenseRsp.module)
}
inline void GetLicenseRsp::set_module(const char* value, size_t size) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.GetLicenseRsp.module)
}
inline ::std::string* GetLicenseRsp::mutable_module() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.GetLicenseRsp.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLicenseRsp::release_module() {
  // @@protoc_insertion_point(field_release:eco.proto.GetLicenseRsp.module)
  
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLicenseRsp::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    
  } else {
    
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.GetLicenseRsp.module)
}

// string lang = 2;
inline void GetLicenseRsp::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLicenseRsp::lang() const {
  // @@protoc_insertion_point(field_get:eco.proto.GetLicenseRsp.lang)
  return lang_.GetNoArena();
}
inline void GetLicenseRsp::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.GetLicenseRsp.lang)
}
#if LANG_CXX11
inline void GetLicenseRsp::set_lang(::std::string&& value) {
  
  lang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.GetLicenseRsp.lang)
}
#endif
inline void GetLicenseRsp::set_lang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.GetLicenseRsp.lang)
}
inline void GetLicenseRsp::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.GetLicenseRsp.lang)
}
inline ::std::string* GetLicenseRsp::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.GetLicenseRsp.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLicenseRsp::release_lang() {
  // @@protoc_insertion_point(field_release:eco.proto.GetLicenseRsp.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLicenseRsp::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.GetLicenseRsp.lang)
}

// string license = 4;
inline void GetLicenseRsp::clear_license() {
  license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLicenseRsp::license() const {
  // @@protoc_insertion_point(field_get:eco.proto.GetLicenseRsp.license)
  return license_.GetNoArena();
}
inline void GetLicenseRsp::set_license(const ::std::string& value) {
  
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.GetLicenseRsp.license)
}
#if LANG_CXX11
inline void GetLicenseRsp::set_license(::std::string&& value) {
  
  license_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.GetLicenseRsp.license)
}
#endif
inline void GetLicenseRsp::set_license(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.GetLicenseRsp.license)
}
inline void GetLicenseRsp::set_license(const char* value, size_t size) {
  
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.GetLicenseRsp.license)
}
inline ::std::string* GetLicenseRsp::mutable_license() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.GetLicenseRsp.license)
  return license_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLicenseRsp::release_license() {
  // @@protoc_insertion_point(field_release:eco.proto.GetLicenseRsp.license)
  
  return license_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLicenseRsp::set_allocated_license(::std::string* license) {
  if (license != NULL) {
    
  } else {
    
  }
  license_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.GetLicenseRsp.license)
}

// string version = 5;
inline void GetLicenseRsp::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLicenseRsp::version() const {
  // @@protoc_insertion_point(field_get:eco.proto.GetLicenseRsp.version)
  return version_.GetNoArena();
}
inline void GetLicenseRsp::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.GetLicenseRsp.version)
}
#if LANG_CXX11
inline void GetLicenseRsp::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.GetLicenseRsp.version)
}
#endif
inline void GetLicenseRsp::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.GetLicenseRsp.version)
}
inline void GetLicenseRsp::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.GetLicenseRsp.version)
}
inline ::std::string* GetLicenseRsp::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.GetLicenseRsp.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLicenseRsp::release_version() {
  // @@protoc_insertion_point(field_release:eco.proto.GetLicenseRsp.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLicenseRsp::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.GetLicenseRsp.version)
}

// -------------------------------------------------------------------

// Function

// uint64 id = 1;
inline void Function::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Function::id() const {
  // @@protoc_insertion_point(field_get:eco.proto.Function.id)
  return id_;
}
inline void Function::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Function.id)
}

// uint64 parent = 2;
inline void Function::clear_parent() {
  parent_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Function::parent() const {
  // @@protoc_insertion_point(field_get:eco.proto.Function.parent)
  return parent_;
}
inline void Function::set_parent(::google::protobuf::uint64 value) {
  
  parent_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Function.parent)
}

// string path = 3;
inline void Function::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::path() const {
  // @@protoc_insertion_point(field_get:eco.proto.Function.path)
  return path_.GetNoArena();
}
inline void Function::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Function.path)
}
#if LANG_CXX11
inline void Function::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Function.path)
}
#endif
inline void Function::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Function.path)
}
inline void Function::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Function.path)
}
inline ::std::string* Function::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Function.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_path() {
  // @@protoc_insertion_point(field_release:eco.proto.Function.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Function.path)
}

// string name = 4;
inline void Function::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::name() const {
  // @@protoc_insertion_point(field_get:eco.proto.Function.name)
  return name_.GetNoArena();
}
inline void Function::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Function.name)
}
#if LANG_CXX11
inline void Function::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Function.name)
}
#endif
inline void Function::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Function.name)
}
inline void Function::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Function.name)
}
inline ::std::string* Function::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Function.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_name() {
  // @@protoc_insertion_point(field_release:eco.proto.Function.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Function.name)
}

// string detail = 5;
inline void Function::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::detail() const {
  // @@protoc_insertion_point(field_get:eco.proto.Function.detail)
  return detail_.GetNoArena();
}
inline void Function::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Function.detail)
}
#if LANG_CXX11
inline void Function::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Function.detail)
}
#endif
inline void Function::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Function.detail)
}
inline void Function::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Function.detail)
}
inline ::std::string* Function::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Function.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_detail() {
  // @@protoc_insertion_point(field_release:eco.proto.Function.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Function.detail)
}

// -------------------------------------------------------------------

// Role

// uint64 id = 1;
inline void Role::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Role::id() const {
  // @@protoc_insertion_point(field_get:eco.proto.Role.id)
  return id_;
}
inline void Role::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Role.id)
}

// string name = 2;
inline void Role::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:eco.proto.Role.name)
  return name_.GetNoArena();
}
inline void Role::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Role.name)
}
#if LANG_CXX11
inline void Role::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Role.name)
}
#endif
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Role.name)
}
inline void Role::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Role.name)
}
inline ::std::string* Role::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Role.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:eco.proto.Role.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Role.name)
}

// repeated .eco.proto.Function func = 10;
inline int Role::func_size() const {
  return func_.size();
}
inline void Role::clear_func() {
  func_.Clear();
}
inline const ::eco::proto::Function& Role::func(int index) const {
  // @@protoc_insertion_point(field_get:eco.proto.Role.func)
  return func_.Get(index);
}
inline ::eco::proto::Function* Role::mutable_func(int index) {
  // @@protoc_insertion_point(field_mutable:eco.proto.Role.func)
  return func_.Mutable(index);
}
inline ::eco::proto::Function* Role::add_func() {
  // @@protoc_insertion_point(field_add:eco.proto.Role.func)
  return func_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eco::proto::Function >*
Role::mutable_func() {
  // @@protoc_insertion_point(field_mutable_list:eco.proto.Role.func)
  return &func_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eco::proto::Function >&
Role::func() const {
  // @@protoc_insertion_point(field_list:eco.proto.Role.func)
  return func_;
}

// -------------------------------------------------------------------

// Logging

// uint64 id = 1;
inline void Logging::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Logging::id() const {
  // @@protoc_insertion_point(field_get:eco.proto.Logging.id)
  return id_;
}
inline void Logging::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Logging.id)
}

// string user = 2;
inline void Logging::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Logging::user() const {
  // @@protoc_insertion_point(field_get:eco.proto.Logging.user)
  return user_.GetNoArena();
}
inline void Logging::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Logging.user)
}
#if LANG_CXX11
inline void Logging::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Logging.user)
}
#endif
inline void Logging::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Logging.user)
}
inline void Logging::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Logging.user)
}
inline ::std::string* Logging::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Logging.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Logging::release_user() {
  // @@protoc_insertion_point(field_release:eco.proto.Logging.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logging::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Logging.user)
}

// string time = 3;
inline void Logging::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Logging::time() const {
  // @@protoc_insertion_point(field_get:eco.proto.Logging.time)
  return time_.GetNoArena();
}
inline void Logging::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Logging.time)
}
#if LANG_CXX11
inline void Logging::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Logging.time)
}
#endif
inline void Logging::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Logging.time)
}
inline void Logging::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Logging.time)
}
inline ::std::string* Logging::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Logging.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Logging::release_time() {
  // @@protoc_insertion_point(field_release:eco.proto.Logging.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logging::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Logging.time)
}

// string ip = 4;
inline void Logging::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Logging::ip() const {
  // @@protoc_insertion_point(field_get:eco.proto.Logging.ip)
  return ip_.GetNoArena();
}
inline void Logging::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Logging.ip)
}
#if LANG_CXX11
inline void Logging::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Logging.ip)
}
#endif
inline void Logging::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Logging.ip)
}
inline void Logging::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Logging.ip)
}
inline ::std::string* Logging::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Logging.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Logging::release_ip() {
  // @@protoc_insertion_point(field_release:eco.proto.Logging.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logging::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Logging.ip)
}

// string mac = 5;
inline void Logging::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Logging::mac() const {
  // @@protoc_insertion_point(field_get:eco.proto.Logging.mac)
  return mac_.GetNoArena();
}
inline void Logging::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Logging.mac)
}
#if LANG_CXX11
inline void Logging::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Logging.mac)
}
#endif
inline void Logging::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Logging.mac)
}
inline void Logging::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Logging.mac)
}
inline ::std::string* Logging::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Logging.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Logging::release_mac() {
  // @@protoc_insertion_point(field_release:eco.proto.Logging.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logging::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Logging.mac)
}

// uint32 action = 8;
inline void Logging::clear_action() {
  action_ = 0u;
}
inline ::google::protobuf::uint32 Logging::action() const {
  // @@protoc_insertion_point(field_get:eco.proto.Logging.action)
  return action_;
}
inline void Logging::set_action(::google::protobuf::uint32 value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Logging.action)
}

// uint64 object = 9;
inline void Logging::clear_object() {
  object_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Logging::object() const {
  // @@protoc_insertion_point(field_get:eco.proto.Logging.object)
  return object_;
}
inline void Logging::set_object(::google::protobuf::uint64 value) {
  
  object_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Logging.object)
}

// string name = 10;
inline void Logging::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Logging::name() const {
  // @@protoc_insertion_point(field_get:eco.proto.Logging.name)
  return name_.GetNoArena();
}
inline void Logging::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Logging.name)
}
#if LANG_CXX11
inline void Logging::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Logging.name)
}
#endif
inline void Logging::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Logging.name)
}
inline void Logging::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Logging.name)
}
inline ::std::string* Logging::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Logging.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Logging::release_name() {
  // @@protoc_insertion_point(field_release:eco.proto.Logging.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logging::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Logging.name)
}

// string value = 11;
inline void Logging::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Logging::value() const {
  // @@protoc_insertion_point(field_get:eco.proto.Logging.value)
  return value_.GetNoArena();
}
inline void Logging::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Logging.value)
}
#if LANG_CXX11
inline void Logging::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Logging.value)
}
#endif
inline void Logging::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Logging.value)
}
inline void Logging::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Logging.value)
}
inline ::std::string* Logging::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Logging.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Logging::release_value() {
  // @@protoc_insertion_point(field_release:eco.proto.Logging.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logging::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Logging.value)
}

// string detail = 12;
inline void Logging::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Logging::detail() const {
  // @@protoc_insertion_point(field_get:eco.proto.Logging.detail)
  return detail_.GetNoArena();
}
inline void Logging::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Logging.detail)
}
#if LANG_CXX11
inline void Logging::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Logging.detail)
}
#endif
inline void Logging::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Logging.detail)
}
inline void Logging::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Logging.detail)
}
inline ::std::string* Logging::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Logging.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Logging::release_detail() {
  // @@protoc_insertion_point(field_release:eco.proto.Logging.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logging::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Logging.detail)
}

// -------------------------------------------------------------------

// Subscribe

// string user = 1;
inline void Subscribe::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscribe::user() const {
  // @@protoc_insertion_point(field_get:eco.proto.Subscribe.user)
  return user_.GetNoArena();
}
inline void Subscribe::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Subscribe.user)
}
#if LANG_CXX11
inline void Subscribe::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Subscribe.user)
}
#endif
inline void Subscribe::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Subscribe.user)
}
inline void Subscribe::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Subscribe.user)
}
inline ::std::string* Subscribe::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Subscribe.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscribe::release_user() {
  // @@protoc_insertion_point(field_release:eco.proto.Subscribe.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Subscribe.user)
}

// uint32 type = 2;
inline void Subscribe::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 Subscribe::type() const {
  // @@protoc_insertion_point(field_get:eco.proto.Subscribe.type)
  return type_;
}
inline void Subscribe::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Subscribe.type)
}

// uint64 value = 3;
inline void Subscribe::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Subscribe::value() const {
  // @@protoc_insertion_point(field_get:eco.proto.Subscribe.value)
  return value_;
}
inline void Subscribe::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Subscribe.value)
}

// string topic = 4;
inline void Subscribe::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscribe::topic() const {
  // @@protoc_insertion_point(field_get:eco.proto.Subscribe.topic)
  return topic_.GetNoArena();
}
inline void Subscribe::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Subscribe.topic)
}
#if LANG_CXX11
inline void Subscribe::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Subscribe.topic)
}
#endif
inline void Subscribe::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Subscribe.topic)
}
inline void Subscribe::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Subscribe.topic)
}
inline ::std::string* Subscribe::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Subscribe.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscribe::release_topic() {
  // @@protoc_insertion_point(field_release:eco.proto.Subscribe.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Subscribe.topic)
}

// -------------------------------------------------------------------

// Remove

// string user = 1;
inline void Remove::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Remove::user() const {
  // @@protoc_insertion_point(field_get:eco.proto.Remove.user)
  return user_.GetNoArena();
}
inline void Remove::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Remove.user)
}
#if LANG_CXX11
inline void Remove::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Remove.user)
}
#endif
inline void Remove::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Remove.user)
}
inline void Remove::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Remove.user)
}
inline ::std::string* Remove::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Remove.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Remove::release_user() {
  // @@protoc_insertion_point(field_release:eco.proto.Remove.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Remove::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Remove.user)
}

// uint64 object = 2;
inline void Remove::clear_object() {
  object_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Remove::object() const {
  // @@protoc_insertion_point(field_get:eco.proto.Remove.object)
  return object_;
}
inline void Remove::set_object(::google::protobuf::uint64 value) {
  
  object_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Remove.object)
}

// string entity = 5;
inline void Remove::clear_entity() {
  entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Remove::entity() const {
  // @@protoc_insertion_point(field_get:eco.proto.Remove.entity)
  return entity_.GetNoArena();
}
inline void Remove::set_entity(const ::std::string& value) {
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Remove.entity)
}
#if LANG_CXX11
inline void Remove::set_entity(::std::string&& value) {
  
  entity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Remove.entity)
}
#endif
inline void Remove::set_entity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Remove.entity)
}
inline void Remove::set_entity(const char* value, size_t size) {
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Remove.entity)
}
inline ::std::string* Remove::mutable_entity() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Remove.entity)
  return entity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Remove::release_entity() {
  // @@protoc_insertion_point(field_release:eco.proto.Remove.entity)
  
  return entity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Remove::set_allocated_entity(::std::string* entity) {
  if (entity != NULL) {
    
  } else {
    
  }
  entity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Remove.entity)
}

// -------------------------------------------------------------------

// Property

// string user = 1;
inline void Property::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::user() const {
  // @@protoc_insertion_point(field_get:eco.proto.Property.user)
  return user_.GetNoArena();
}
inline void Property::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Property.user)
}
#if LANG_CXX11
inline void Property::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Property.user)
}
#endif
inline void Property::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Property.user)
}
inline void Property::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Property.user)
}
inline ::std::string* Property::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Property.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_user() {
  // @@protoc_insertion_point(field_release:eco.proto.Property.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Property.user)
}

// uint64 object = 2;
inline void Property::clear_object() {
  object_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Property::object() const {
  // @@protoc_insertion_point(field_get:eco.proto.Property.object)
  return object_;
}
inline void Property::set_object(::google::protobuf::uint64 value) {
  
  object_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Property.object)
}

// string name = 3;
inline void Property::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:eco.proto.Property.name)
  return name_.GetNoArena();
}
inline void Property::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Property.name)
}
#if LANG_CXX11
inline void Property::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Property.name)
}
#endif
inline void Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Property.name)
}
inline void Property::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Property.name)
}
inline ::std::string* Property::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Property.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:eco.proto.Property.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Property.name)
}

// string value = 4;
inline void Property::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::value() const {
  // @@protoc_insertion_point(field_get:eco.proto.Property.value)
  return value_.GetNoArena();
}
inline void Property::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Property.value)
}
#if LANG_CXX11
inline void Property::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Property.value)
}
#endif
inline void Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Property.value)
}
inline void Property::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Property.value)
}
inline ::std::string* Property::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Property.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_value() {
  // @@protoc_insertion_point(field_release:eco.proto.Property.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Property.value)
}

// string entity = 5;
inline void Property::clear_entity() {
  entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::entity() const {
  // @@protoc_insertion_point(field_get:eco.proto.Property.entity)
  return entity_.GetNoArena();
}
inline void Property::set_entity(const ::std::string& value) {
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Property.entity)
}
#if LANG_CXX11
inline void Property::set_entity(::std::string&& value) {
  
  entity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Property.entity)
}
#endif
inline void Property::set_entity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Property.entity)
}
inline void Property::set_entity(const char* value, size_t size) {
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Property.entity)
}
inline ::std::string* Property::mutable_entity() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Property.entity)
  return entity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_entity() {
  // @@protoc_insertion_point(field_release:eco.proto.Property.entity)
  
  return entity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_entity(::std::string* entity) {
  if (entity != NULL) {
    
  } else {
    
  }
  entity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Property.entity)
}

// -------------------------------------------------------------------

// Datatype

// uint32 type = 11;
inline void Datatype::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 Datatype::type() const {
  // @@protoc_insertion_point(field_get:eco.proto.Datatype.type)
  return type_;
}
inline void Datatype::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eco.proto.Datatype.type)
}

// string value = 12;
inline void Datatype::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Datatype::value() const {
  // @@protoc_insertion_point(field_get:eco.proto.Datatype.value)
  return value_.GetNoArena();
}
inline void Datatype::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Datatype.value)
}
#if LANG_CXX11
inline void Datatype::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Datatype.value)
}
#endif
inline void Datatype::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Datatype.value)
}
inline void Datatype::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Datatype.value)
}
inline ::std::string* Datatype::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Datatype.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Datatype::release_value() {
  // @@protoc_insertion_point(field_release:eco.proto.Datatype.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datatype::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Datatype.value)
}

// string range = 13;
inline void Datatype::clear_range() {
  range_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Datatype::range() const {
  // @@protoc_insertion_point(field_get:eco.proto.Datatype.range)
  return range_.GetNoArena();
}
inline void Datatype::set_range(const ::std::string& value) {
  
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Datatype.range)
}
#if LANG_CXX11
inline void Datatype::set_range(::std::string&& value) {
  
  range_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Datatype.range)
}
#endif
inline void Datatype::set_range(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Datatype.range)
}
inline void Datatype::set_range(const char* value, size_t size) {
  
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Datatype.range)
}
inline ::std::string* Datatype::mutable_range() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Datatype.range)
  return range_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Datatype::release_range() {
  // @@protoc_insertion_point(field_release:eco.proto.Datatype.range)
  
  return range_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datatype::set_allocated_range(::std::string* range) {
  if (range != NULL) {
    
  } else {
    
  }
  range_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Datatype.range)
}

// string detail = 14;
inline void Datatype::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Datatype::detail() const {
  // @@protoc_insertion_point(field_get:eco.proto.Datatype.detail)
  return detail_.GetNoArena();
}
inline void Datatype::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eco.proto.Datatype.detail)
}
#if LANG_CXX11
inline void Datatype::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eco.proto.Datatype.detail)
}
#endif
inline void Datatype::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eco.proto.Datatype.detail)
}
inline void Datatype::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eco.proto.Datatype.detail)
}
inline ::std::string* Datatype::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:eco.proto.Datatype.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Datatype::release_detail() {
  // @@protoc_insertion_point(field_release:eco.proto.Datatype.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datatype::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:eco.proto.Datatype.detail)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace eco

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Object_2eproto__INCLUDED
