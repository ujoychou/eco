// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#include "Monitor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace eco {
namespace net {
namespace proto {
constexpr Session::Session(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u})
  , owner_(0u)
  , port_(0u)
  , state_(0u)
  , stamp_open_(uint64_t{0u})
  , stamp_close_(uint64_t{0u}){}
struct SessionDefaultTypeInternal {
  constexpr SessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionDefaultTypeInternal() {}
  union {
    Session _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionDefaultTypeInternal _Session_default_instance_;
constexpr SessionCount::SessionCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stamp_(uint64_t{0u})
  , sess_size_(0u)
  , conn_size_(0u)
  , ddos_size_(0u){}
struct SessionCountDefaultTypeInternal {
  constexpr SessionCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionCountDefaultTypeInternal() {}
  union {
    SessionCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionCountDefaultTypeInternal _SessionCount_default_instance_;
constexpr SessionExcept::SessionExcept(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stamp_(uint64_t{0u})
  , except_mode_(0u)
  , except_total_(0u)
  , except_size_(0u){}
struct SessionExceptDefaultTypeInternal {
  constexpr SessionExceptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionExceptDefaultTypeInternal() {}
  union {
    SessionExcept _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionExceptDefaultTypeInternal _SessionExcept_default_instance_;
constexpr NetworkCount::NetworkCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(uint64_t{0u})
  , stamp_(uint64_t{0u})
  , req_size_(0u)
  , rsp_size_(0u)
  , req_kbyte_(uint64_t{0u})
  , rsp_kbyte_(uint64_t{0u}){}
struct NetworkCountDefaultTypeInternal {
  constexpr NetworkCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetworkCountDefaultTypeInternal() {}
  union {
    NetworkCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetworkCountDefaultTypeInternal _NetworkCount_default_instance_;
constexpr Service::Service(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stamp_(uint64_t{0u}){}
struct ServiceDefaultTypeInternal {
  constexpr ServiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceDefaultTypeInternal() {}
  union {
    Service _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceDefaultTypeInternal _Service_default_instance_;
constexpr Logging::Logging(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LoggingDefaultTypeInternal {
  constexpr LoggingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoggingDefaultTypeInternal() {}
  union {
    Logging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoggingDefaultTypeInternal _Logging_default_instance_;
}  // namespace proto
}  // namespace net
}  // namespace eco
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Monitor_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Monitor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Monitor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Monitor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Session, id_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Session, owner_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Session, user_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Session, lang_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Session, ip_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Session, port_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Session, state_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Session, stamp_open_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Session, stamp_close_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionCount, stamp_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionCount, sess_size_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionCount, conn_size_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionCount, ddos_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionExcept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionExcept, ip_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionExcept, stamp_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionExcept, except_mode_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionExcept, except_total_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::SessionExcept, except_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::NetworkCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::NetworkCount, session_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::NetworkCount, stamp_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::NetworkCount, req_size_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::NetworkCount, rsp_size_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::NetworkCount, req_kbyte_),
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::NetworkCount, rsp_kbyte_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Service, stamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eco::net::proto::Logging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::eco::net::proto::Session)},
  { 14, -1, sizeof(::eco::net::proto::SessionCount)},
  { 23, -1, sizeof(::eco::net::proto::SessionExcept)},
  { 33, -1, sizeof(::eco::net::proto::NetworkCount)},
  { 44, -1, sizeof(::eco::net::proto::Service)},
  { 50, -1, sizeof(::eco::net::proto::Logging)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eco::net::proto::_Session_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eco::net::proto::_SessionCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eco::net::proto::_SessionExcept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eco::net::proto::_NetworkCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eco::net::proto::_Service_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eco::net::proto::_Logging_default_instance_),
};

const char descriptor_table_protodef_Monitor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rMonitor.proto\022\reco.net.proto\"\222\001\n\007Sessi"
  "on\022\n\n\002id\030\001 \001(\004\022\r\n\005owner\030\002 \001(\r\022\014\n\004user\030\005 "
  "\001(\t\022\014\n\004lang\030\006 \001(\t\022\n\n\002ip\030\n \001(\t\022\014\n\004port\030\013 "
  "\001(\r\022\r\n\005state\030\017 \001(\r\022\022\n\nstamp_open\030\020 \001(\004\022\023"
  "\n\013stamp_close\030\021 \001(\004\"V\n\014SessionCount\022\r\n\005s"
  "tamp\030\001 \001(\004\022\021\n\tsess_size\030\002 \001(\r\022\021\n\tconn_si"
  "ze\030\003 \001(\r\022\021\n\tddos_size\030\004 \001(\r\"j\n\rSessionEx"
  "cept\022\n\n\002ip\030\001 \001(\t\022\r\n\005stamp\030\002 \001(\004\022\023\n\013excep"
  "t_mode\030\005 \001(\r\022\024\n\014except_total\030\006 \001(\r\022\023\n\013ex"
  "cept_size\030\007 \001(\r\"x\n\014NetworkCount\022\017\n\007sessi"
  "on\030\001 \001(\004\022\r\n\005stamp\030\002 \001(\004\022\020\n\010req_size\030\n \001("
  "\r\022\020\n\010rsp_size\030\013 \001(\r\022\021\n\treq_kbyte\030\024 \001(\004\022\021"
  "\n\trsp_kbyte\030\025 \001(\004\"\030\n\007Service\022\r\n\005stamp\030\001 "
  "\001(\004\"\t\n\007Loggingb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Monitor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Monitor_2eproto = {
  false, false, 542, descriptor_table_protodef_Monitor_2eproto, "Monitor.proto", 
  &descriptor_table_Monitor_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_Monitor_2eproto::offsets,
  file_level_metadata_Monitor_2eproto, file_level_enum_descriptors_Monitor_2eproto, file_level_service_descriptors_Monitor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Monitor_2eproto_getter() {
  return &descriptor_table_Monitor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Monitor_2eproto(&descriptor_table_Monitor_2eproto);
namespace eco {
namespace net {
namespace proto {

// ===================================================================

class Session::_Internal {
 public:
};

Session::Session(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:eco.net.proto.Session)
}
Session::Session(const Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user(), 
      GetArenaForAllocation());
  }
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stamp_close_) -
    reinterpret_cast<char*>(&id_)) + sizeof(stamp_close_));
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.Session)
}

void Session::SharedCtor() {
user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stamp_close_) -
    reinterpret_cast<char*>(&id_)) + sizeof(stamp_close_));
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:eco.net.proto.Session)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Session::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Session::ArenaDtor(void* object) {
  Session* _this = reinterpret_cast< Session* >(object);
  (void)_this;
}
void Session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmpty();
  lang_.ClearToEmpty();
  ip_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stamp_close_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stamp_close_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eco.net.proto.Session.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lang = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eco.net.proto.Session.lang"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eco.net.proto.Session.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stamp_open = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          stamp_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stamp_close = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          stamp_close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Session::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 owner = 2;
  if (this->owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner(), target);
  }

  // string user = 5;
  if (!this->user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.Session.user");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user(), target);
  }

  // string lang = 6;
  if (!this->lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.Session.lang");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_lang(), target);
  }

  // string ip = 10;
  if (!this->ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.Session.ip");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ip(), target);
  }

  // uint32 port = 11;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_port(), target);
  }

  // uint32 state = 15;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_state(), target);
  }

  // uint64 stamp_open = 16;
  if (this->stamp_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_stamp_open(), target);
  }

  // uint64 stamp_close = 17;
  if (this->stamp_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_stamp_close(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.Session)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 5;
  if (!this->user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string lang = 6;
  if (!this->lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string ip = 10;
  if (!this->ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint32 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner());
  }

  // uint32 port = 11;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // uint32 state = 15;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  // uint64 stamp_open = 16;
  if (this->stamp_open() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stamp_open());
  }

  // uint64 stamp_close = 17;
  if (this->stamp_close() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stamp_close());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Session::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Session>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.Session)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.user().empty()) {
    _internal_set_user(from._internal_user());
  }
  if (!from.lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from.ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.stamp_open() != 0) {
    _internal_set_stamp_open(from._internal_stamp_open());
  }
  if (from.stamp_close() != 0) {
    _internal_set_stamp_close(from._internal_stamp_close());
  }
}

void Session::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_, GetArenaForAllocation(),
      &other->user_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, GetArenaForAllocation(),
      &other->lang_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Session, stamp_close_)
      + sizeof(Session::stamp_close_)
      - PROTOBUF_FIELD_OFFSET(Session, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Session::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[0]);
}

// ===================================================================

class SessionCount::_Internal {
 public:
};

SessionCount::SessionCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:eco.net.proto.SessionCount)
}
SessionCount::SessionCount(const SessionCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ddos_size_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(ddos_size_));
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.SessionCount)
}

void SessionCount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ddos_size_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(ddos_size_));
}

SessionCount::~SessionCount() {
  // @@protoc_insertion_point(destructor:eco.net.proto.SessionCount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SessionCount::ArenaDtor(void* object) {
  SessionCount* _this = reinterpret_cast< SessionCount* >(object);
  (void)_this;
}
void SessionCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionCount::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.SessionCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddos_size_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(ddos_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sess_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sess_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 conn_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          conn_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ddos_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ddos_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.SessionCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stamp(), target);
  }

  // uint32 sess_size = 2;
  if (this->sess_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sess_size(), target);
  }

  // uint32 conn_size = 3;
  if (this->conn_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_conn_size(), target);
  }

  // uint32 ddos_size = 4;
  if (this->ddos_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ddos_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.SessionCount)
  return target;
}

size_t SessionCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.SessionCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stamp());
  }

  // uint32 sess_size = 2;
  if (this->sess_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sess_size());
  }

  // uint32 conn_size = 3;
  if (this->conn_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_conn_size());
  }

  // uint32 ddos_size = 4;
  if (this->ddos_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ddos_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.SessionCount)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.SessionCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.SessionCount)
    MergeFrom(*source);
  }
}

void SessionCount::MergeFrom(const SessionCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.SessionCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stamp() != 0) {
    _internal_set_stamp(from._internal_stamp());
  }
  if (from.sess_size() != 0) {
    _internal_set_sess_size(from._internal_sess_size());
  }
  if (from.conn_size() != 0) {
    _internal_set_conn_size(from._internal_conn_size());
  }
  if (from.ddos_size() != 0) {
    _internal_set_ddos_size(from._internal_ddos_size());
  }
}

void SessionCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.SessionCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionCount::CopyFrom(const SessionCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.SessionCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionCount::IsInitialized() const {
  return true;
}

void SessionCount::InternalSwap(SessionCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionCount, ddos_size_)
      + sizeof(SessionCount::ddos_size_)
      - PROTOBUF_FIELD_OFFSET(SessionCount, stamp_)>(
          reinterpret_cast<char*>(&stamp_),
          reinterpret_cast<char*>(&other->stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[1]);
}

// ===================================================================

class SessionExcept::_Internal {
 public:
};

SessionExcept::SessionExcept(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:eco.net.proto.SessionExcept)
}
SessionExcept::SessionExcept(const SessionExcept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&except_size_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(except_size_));
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.SessionExcept)
}

void SessionExcept::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&except_size_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(except_size_));
}

SessionExcept::~SessionExcept() {
  // @@protoc_insertion_point(destructor:eco.net.proto.SessionExcept)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionExcept::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionExcept::ArenaDtor(void* object) {
  SessionExcept* _this = reinterpret_cast< SessionExcept* >(object);
  (void)_this;
}
void SessionExcept::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionExcept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionExcept::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.SessionExcept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&except_size_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(except_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionExcept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eco.net.proto.SessionExcept.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 except_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          except_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 except_total = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          except_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 except_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          except_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionExcept::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.SessionExcept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eco.net.proto.SessionExcept.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint64 stamp = 2;
  if (this->stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stamp(), target);
  }

  // uint32 except_mode = 5;
  if (this->except_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_except_mode(), target);
  }

  // uint32 except_total = 6;
  if (this->except_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_except_total(), target);
  }

  // uint32 except_size = 7;
  if (this->except_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_except_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.SessionExcept)
  return target;
}

size_t SessionExcept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.SessionExcept)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint64 stamp = 2;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stamp());
  }

  // uint32 except_mode = 5;
  if (this->except_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_except_mode());
  }

  // uint32 except_total = 6;
  if (this->except_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_except_total());
  }

  // uint32 except_size = 7;
  if (this->except_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_except_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionExcept::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.SessionExcept)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionExcept* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionExcept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.SessionExcept)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.SessionExcept)
    MergeFrom(*source);
  }
}

void SessionExcept::MergeFrom(const SessionExcept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.SessionExcept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.stamp() != 0) {
    _internal_set_stamp(from._internal_stamp());
  }
  if (from.except_mode() != 0) {
    _internal_set_except_mode(from._internal_except_mode());
  }
  if (from.except_total() != 0) {
    _internal_set_except_total(from._internal_except_total());
  }
  if (from.except_size() != 0) {
    _internal_set_except_size(from._internal_except_size());
  }
}

void SessionExcept::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.SessionExcept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionExcept::CopyFrom(const SessionExcept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.SessionExcept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionExcept::IsInitialized() const {
  return true;
}

void SessionExcept::InternalSwap(SessionExcept* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionExcept, except_size_)
      + sizeof(SessionExcept::except_size_)
      - PROTOBUF_FIELD_OFFSET(SessionExcept, stamp_)>(
          reinterpret_cast<char*>(&stamp_),
          reinterpret_cast<char*>(&other->stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionExcept::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[2]);
}

// ===================================================================

class NetworkCount::_Internal {
 public:
};

NetworkCount::NetworkCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:eco.net.proto.NetworkCount)
}
NetworkCount::NetworkCount(const NetworkCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&rsp_kbyte_) -
    reinterpret_cast<char*>(&session_)) + sizeof(rsp_kbyte_));
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.NetworkCount)
}

void NetworkCount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rsp_kbyte_) -
    reinterpret_cast<char*>(&session_)) + sizeof(rsp_kbyte_));
}

NetworkCount::~NetworkCount() {
  // @@protoc_insertion_point(destructor:eco.net.proto.NetworkCount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetworkCount::ArenaDtor(void* object) {
  NetworkCount* _this = reinterpret_cast< NetworkCount* >(object);
  (void)_this;
}
void NetworkCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkCount::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.NetworkCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rsp_kbyte_) -
      reinterpret_cast<char*>(&session_)) + sizeof(rsp_kbyte_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 req_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          req_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rsp_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          rsp_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 req_kbyte = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          req_kbyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rsp_kbyte = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          rsp_kbyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.NetworkCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session = 1;
  if (this->session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session(), target);
  }

  // uint64 stamp = 2;
  if (this->stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stamp(), target);
  }

  // uint32 req_size = 10;
  if (this->req_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_req_size(), target);
  }

  // uint32 rsp_size = 11;
  if (this->rsp_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_rsp_size(), target);
  }

  // uint64 req_kbyte = 20;
  if (this->req_kbyte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_req_kbyte(), target);
  }

  // uint64 rsp_kbyte = 21;
  if (this->rsp_kbyte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_rsp_kbyte(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.NetworkCount)
  return target;
}

size_t NetworkCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.NetworkCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 session = 1;
  if (this->session() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session());
  }

  // uint64 stamp = 2;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stamp());
  }

  // uint32 req_size = 10;
  if (this->req_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_req_size());
  }

  // uint32 rsp_size = 11;
  if (this->rsp_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rsp_size());
  }

  // uint64 req_kbyte = 20;
  if (this->req_kbyte() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_req_kbyte());
  }

  // uint64 rsp_kbyte = 21;
  if (this->rsp_kbyte() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rsp_kbyte());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.NetworkCount)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.NetworkCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.NetworkCount)
    MergeFrom(*source);
  }
}

void NetworkCount::MergeFrom(const NetworkCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.NetworkCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session() != 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.stamp() != 0) {
    _internal_set_stamp(from._internal_stamp());
  }
  if (from.req_size() != 0) {
    _internal_set_req_size(from._internal_req_size());
  }
  if (from.rsp_size() != 0) {
    _internal_set_rsp_size(from._internal_rsp_size());
  }
  if (from.req_kbyte() != 0) {
    _internal_set_req_kbyte(from._internal_req_kbyte());
  }
  if (from.rsp_kbyte() != 0) {
    _internal_set_rsp_kbyte(from._internal_rsp_kbyte());
  }
}

void NetworkCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.NetworkCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkCount::CopyFrom(const NetworkCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.NetworkCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCount::IsInitialized() const {
  return true;
}

void NetworkCount::InternalSwap(NetworkCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkCount, rsp_kbyte_)
      + sizeof(NetworkCount::rsp_kbyte_)
      - PROTOBUF_FIELD_OFFSET(NetworkCount, session_)>(
          reinterpret_cast<char*>(&session_),
          reinterpret_cast<char*>(&other->session_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[3]);
}

// ===================================================================

class Service::_Internal {
 public:
};

Service::Service(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:eco.net.proto.Service)
}
Service::Service(const Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stamp_ = from.stamp_;
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.Service)
}

void Service::SharedCtor() {
stamp_ = uint64_t{0u};
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:eco.net.proto.Service)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Service::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Service::ArenaDtor(void* object) {
  Service* _this = reinterpret_cast< Service* >(object);
  (void)_this;
}
void Service::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Service::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Service::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Service::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Service::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.Service)
  return target;
}

size_t Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.Service)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Service::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.Service)
  GOOGLE_DCHECK_NE(&from, this);
  const Service* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Service>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.Service)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.Service)
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.Service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stamp() != 0) {
    _internal_set_stamp(from._internal_stamp());
  }
}

void Service::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {
  return true;
}

void Service::InternalSwap(Service* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(stamp_, other->stamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Service::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[4]);
}

// ===================================================================

class Logging::_Internal {
 public:
};

Logging::Logging(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:eco.net.proto.Logging)
}
Logging::Logging(const Logging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:eco.net.proto.Logging)
}

void Logging::SharedCtor() {
}

Logging::~Logging() {
  // @@protoc_insertion_point(destructor:eco.net.proto.Logging)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Logging::ArenaDtor(void* object) {
  Logging* _this = reinterpret_cast< Logging* >(object);
  (void)_this;
}
void Logging::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Logging::Clear() {
// @@protoc_insertion_point(message_clear_start:eco.net.proto.Logging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logging::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logging::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.net.proto.Logging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.net.proto.Logging)
  return target;
}

size_t Logging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eco.net.proto.Logging)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logging::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eco.net.proto.Logging)
  GOOGLE_DCHECK_NE(&from, this);
  const Logging* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logging>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eco.net.proto.Logging)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eco.net.proto.Logging)
    MergeFrom(*source);
  }
}

void Logging::MergeFrom(const Logging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eco.net.proto.Logging)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Logging::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eco.net.proto.Logging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logging::CopyFrom(const Logging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eco.net.proto.Logging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logging::IsInitialized() const {
  return true;
}

void Logging::InternalSwap(Logging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Logging::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace net
}  // namespace eco
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::eco::net::proto::Session* Arena::CreateMaybeMessage< ::eco::net::proto::Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::eco::net::proto::Session >(arena);
}
template<> PROTOBUF_NOINLINE ::eco::net::proto::SessionCount* Arena::CreateMaybeMessage< ::eco::net::proto::SessionCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::eco::net::proto::SessionCount >(arena);
}
template<> PROTOBUF_NOINLINE ::eco::net::proto::SessionExcept* Arena::CreateMaybeMessage< ::eco::net::proto::SessionExcept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::eco::net::proto::SessionExcept >(arena);
}
template<> PROTOBUF_NOINLINE ::eco::net::proto::NetworkCount* Arena::CreateMaybeMessage< ::eco::net::proto::NetworkCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::eco::net::proto::NetworkCount >(arena);
}
template<> PROTOBUF_NOINLINE ::eco::net::proto::Service* Arena::CreateMaybeMessage< ::eco::net::proto::Service >(Arena* arena) {
  return Arena::CreateMessageInternal< ::eco::net::proto::Service >(arena);
}
template<> PROTOBUF_NOINLINE ::eco::net::proto::Logging* Arena::CreateMaybeMessage< ::eco::net::proto::Logging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::eco::net::proto::Logging >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
